// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Introspector discourse 1`] = `
"type ApiKey @pgTable(name: \\"api_keys\\") {
  id: Int! @unique
  # Type _inet is not supported
  # allowed_ips: _inet
  created_at: DateTime!
  created_by_id: Int
  hidden: Boolean! @default(value: false)
  key: String!
  updated_at: DateTime!
  user_id: Int @unique
}

type ApplicationRequest @pgTable(name: \\"application_requests\\") {
  id: Int! @unique
  count: Int! @default(value: 0)
  date: DateTime!
  req_type: Int!
}

type ArInternalMetadatum @pgTable(name: \\"ar_internal_metadata\\") {
  id: ID! @pgColumn(name: \\"key\\") @unique
  created_at: DateTime!
  updated_at: DateTime!
  value: String
}

type Badge @pgTable(name: \\"badges\\") {
  id: Int! @unique
  allow_title: Boolean! @default(value: false)
  auto_revoke: Boolean! @default(value: true)
  badge_grouping_id: Int! @default(value: 5)
  badge_type_id: Int!
  created_at: DateTime!
  description: String
  enabled: Boolean! @default(value: true)
  grant_count: Int! @default(value: 0)
  icon: String @default(value: \\"fa-certificate\\")
  image: String
  listable: Boolean @default(value: true)
  long_description: String
  multiple_grant: Boolean! @default(value: false)
  name: String! @unique
  query: String
  show_posts: Boolean! @default(value: false)
  system: Boolean! @default(value: false)
  target_posts: Boolean @default(value: false)
  trigger: Int
  updated_at: DateTime!
}

type BadgeGrouping @pgTable(name: \\"badge_groupings\\") {
  id: Int! @unique
  created_at: DateTime!
  description: String
  name: String!
  position: Int!
  updated_at: DateTime!
}

type BadgeType @pgTable(name: \\"badge_types\\") {
  id: Int! @unique
  created_at: DateTime!
  name: String! @unique
  updated_at: DateTime!
}

type CategoriesWebHook @pgTable(name: \\"categories_web_hooks\\") {
  category_id: Int!
  web_hook_id: Int!
}

type Category @pgTable(name: \\"categories\\") {
  id: Int! @unique
  all_topics_wiki: Boolean! @default(value: false)
  allow_badges: Boolean! @default(value: true)
  auto_close_based_on_last_post: Boolean @default(value: false)
  auto_close_hours: Float
  color: String! @default(value: \\"AB9364\\")
  contains_messages: Boolean
  created_at: DateTime!
  default_top_period: String @default(value: \\"all\\")
  default_view: String
  description: String
  email_in: String @unique
  email_in_allow_strangers: Boolean @default(value: false)
  latest_post_id: Int
  latest_topic_id: Int
  mailinglist_mirror: Boolean! @default(value: false)
  minimum_required_tags: Int @default(value: 0)
  name: String! @unique
  name_lower: String!
  navigate_to_first_post_after_read: Boolean! @default(value: false)
  num_featured_topics: Int @default(value: 3)
  parent_category_id: Int
  position: Int
  post_count: Int! @default(value: 0)
  posts_day: Int @default(value: 0)
  posts_month: Int @default(value: 0)
  posts_week: Int @default(value: 0)
  posts_year: Int @default(value: 0)
  read_restricted: Boolean! @default(value: false)
  show_subcategory_list: Boolean @default(value: false)
  slug: String!
  sort_ascending: Boolean
  sort_order: String
  subcategory_list_style: String @default(value: \\"rows_with_featured_topics\\")
  suppress_from_latest: Boolean @default(value: false)
  text_color: String! @default(value: \\"FFFFFF\\")
  topic_count: Int! @default(value: 0)
  topic_featured_link_allowed: Boolean @default(value: true)
  topic_id: Int
  topic_template: String
  topics_day: Int @default(value: 0)
  topics_month: Int @default(value: 0)
  topics_week: Int @default(value: 0)
  topics_year: Int @default(value: 0)
  updated_at: DateTime!
  uploaded_background_id: Int
  uploaded_logo_id: Int
  user_id: Int!
}

type CategoryCustomField @pgTable(name: \\"category_custom_fields\\") {
  id: Int! @unique
  category_id: Int!
  created_at: DateTime!
  name: String!
  updated_at: DateTime!
  value: String
}

type CategoryFeaturedTopic @pgTable(name: \\"category_featured_topics\\") {
  id: Int! @unique
  category_id: Int!
  created_at: DateTime!
  rank: Int! @default(value: 0)
  topic_id: Int!
  updated_at: DateTime!
}

type CategoryGroup @pgTable(name: \\"category_groups\\") {
  id: Int! @unique
  category_id: Int!
  created_at: DateTime!
  group_id: Int!
  permission_type: Int @default(value: 1)
  updated_at: DateTime!
}

type CategorySearchDatum @pgTable(name: \\"category_search_data\\") {
  id: Int! @pgColumn(name: \\"category_id\\") @unique
  locale: String
  raw_data: String
  # Type tsvector is not supported
  # search_data: tsvector
  version: Int @default(value: 0)
}

type CategoryTag @pgTable(name: \\"category_tags\\") {
  id: Int! @unique
  category_id: Int!
  created_at: DateTime
  tag_id: Int!
  updated_at: DateTime
}

type CategoryTagGroup @pgTable(name: \\"category_tag_groups\\") {
  id: Int! @unique
  category_id: Int!
  created_at: DateTime
  tag_group_id: Int!
  updated_at: DateTime
}

type CategoryTagStat @pgTable(name: \\"category_tag_stats\\") {
  id: Int! @unique
  category_id: Int!
  tag_id: Int!
  topic_count: Int! @default(value: 0)
}

type CategoryUser @pgTable(name: \\"category_users\\") {
  id: Int! @unique
  category_id: Int!
  notification_level: Int!
  user_id: Int!
}

type ChildTheme @pgTable(name: \\"child_themes\\") {
  id: Int! @unique
  child_theme_id: Int
  created_at: DateTime
  parent_theme_id: Int
  updated_at: DateTime
}

type ColorScheme @pgTable(name: \\"color_schemes\\") {
  id: Int! @unique
  base_scheme_id: String
  created_at: DateTime!
  name: String!
  theme_id: Int
  updated_at: DateTime!
  version: Int! @default(value: 1)
  via_wizard: Boolean! @default(value: false)
}

type ColorSchemeColor @pgTable(name: \\"color_scheme_colors\\") {
  id: Int! @unique
  color_scheme_id: Int!
  created_at: DateTime!
  hex: String!
  name: String!
  updated_at: DateTime!
}

type CustomEmoji @pgTable(name: \\"custom_emojis\\") {
  id: Int! @unique
  created_at: DateTime!
  name: String! @unique
  updated_at: DateTime!
  upload_id: Int!
}

type Developer @pgTable(name: \\"developers\\") {
  id: Int! @unique
  user_id: Int!
}

type DirectoryItem @pgTable(name: \\"directory_items\\") {
  id: Int! @unique
  created_at: DateTime
  days_visited: Int! @default(value: 0)
  likes_given: Int!
  likes_received: Int!
  period_type: Int!
  post_count: Int!
  posts_read: Int! @default(value: 0)
  topic_count: Int!
  topics_entered: Int!
  updated_at: DateTime
  user_id: Int!
}

type Draft @pgTable(name: \\"drafts\\") {
  id: Int! @unique
  created_at: DateTime!
  data: String!
  draft_key: String!
  revisions: Int! @default(value: 1)
  sequence: Int! @default(value: 0)
  updated_at: DateTime!
  user_id: Int!
}

type DraftSequence @pgTable(name: \\"draft_sequences\\") {
  id: Int! @unique
  draft_key: String!
  sequence: Int!
  user_id: Int!
}

type EmailChangeRequest @pgTable(name: \\"email_change_requests\\") {
  id: Int! @unique
  change_state: Int!
  created_at: DateTime!
  new_email: String!
  new_email_token_id: Int
  old_email: String!
  old_email_token_id: Int
  updated_at: DateTime!
  user_id: Int!
}

type EmailLog @pgTable(name: \\"email_logs\\") {
  id: Int! @unique
  bounce_key: UUID
  bounced: Boolean! @default(value: false)
  created_at: DateTime!
  email_type: String!
  message_id: String
  post_id: Int
  to_address: String!
  updated_at: DateTime!
  user_id: Int
}

type EmailToken @pgTable(name: \\"email_tokens\\") {
  id: Int! @unique
  confirmed: Boolean! @default(value: false)
  created_at: DateTime!
  email: String!
  expired: Boolean! @default(value: false)
  token: String! @unique
  updated_at: DateTime!
  user_id: Int!
}

type EmbeddableHost @pgTable(name: \\"embeddable_hosts\\") {
  id: Int! @unique
  category_id: Int!
  class_name: String
  created_at: DateTime
  host: String!
  path_whitelist: String
  updated_at: DateTime
}

type FacebookUserInfo @pgTable(name: \\"facebook_user_infos\\") {
  id: Int! @unique
  about_me: String
  avatar_url: String
  created_at: DateTime!
  email: String
  facebook_user_id: Int! @unique
  first_name: String
  gender: String
  last_name: String
  link: String
  location: String
  name: String
  updated_at: DateTime!
  user_id: Int! @unique
  username: String
  website: String
}

type GithubUserInfo @pgTable(name: \\"github_user_infos\\") {
  id: Int! @unique
  created_at: DateTime!
  github_user_id: Int! @unique
  screen_name: String!
  updated_at: DateTime!
  user_id: Int! @unique
}

type GivenDailyLike @pgTable(name: \\"given_daily_likes\\") {
  given_date: DateTime!
  likes_given: Int!
  limit_reached: Boolean! @default(value: false)
  user_id: Int!
}

type GoogleUserInfo @pgTable(name: \\"google_user_infos\\") {
  id: Int! @unique
  created_at: DateTime!
  email: String
  first_name: String
  gender: String
  google_user_id: String! @unique
  last_name: String
  link: String
  name: String
  picture: String
  profile_link: String
  updated_at: DateTime!
  user_id: Int! @unique
}

type Group @pgTable(name: \\"groups\\") {
  id: Int! @unique
  allow_membership_requests: Boolean! @default(value: false)
  automatic: Boolean! @default(value: false)
  automatic_membership_email_domains: String
  automatic_membership_retroactive: Boolean @default(value: false)
  bio_cooked: String
  bio_raw: String
  created_at: DateTime!
  default_notification_level: Int! @default(value: 3)
  flair_bg_color: String
  flair_color: String
  flair_url: String
  full_name: String
  grant_trust_level: Int
  has_messages: Boolean! @default(value: false)
  incoming_email: String @unique
  membership_request_template: String
  mentionable_level: Int @default(value: 0)
  messageable_level: Int @default(value: 0)
  name: String! @unique
  primary_group: Boolean! @default(value: false)
  public_admission: Boolean! @default(value: false)
  public_exit: Boolean! @default(value: false)
  title: String
  updated_at: DateTime!
  user_count: Int! @default(value: 0)
  visibility_level: Int! @default(value: 0)
}

type GroupArchivedMessage @pgTable(name: \\"group_archived_messages\\") {
  id: Int! @unique
  created_at: DateTime
  group_id: Int!
  topic_id: Int!
  updated_at: DateTime
}

type GroupCustomField @pgTable(name: \\"group_custom_fields\\") {
  id: Int! @unique
  created_at: DateTime!
  group_id: Int!
  name: String!
  updated_at: DateTime!
  value: String
}

type GroupHistory @pgTable(name: \\"group_histories\\") {
  id: Int! @unique
  acting_user_id: Int!
  action: Int!
  created_at: DateTime!
  group_id: Int!
  new_value: String
  prev_value: String
  subject: String
  target_user_id: Int
  updated_at: DateTime!
}

type GroupMention @pgTable(name: \\"group_mentions\\") {
  id: Int! @unique
  created_at: DateTime
  group_id: Int
  post_id: Int
  updated_at: DateTime
}

type GroupUser @pgTable(name: \\"group_users\\") {
  id: Int! @unique
  created_at: DateTime!
  group_id: Int!
  notification_level: Int! @default(value: 2)
  owner: Boolean! @default(value: false)
  updated_at: DateTime!
  user_id: Int!
}

type GroupsWebHook @pgTable(name: \\"groups_web_hooks\\") {
  group_id: Int!
  web_hook_id: Int!
}

type IncomingDomain @pgTable(name: \\"incoming_domains\\") {
  id: Int! @unique
  https: Boolean! @default(value: false)
  name: String!
  port: Int!
}

type IncomingEmail @pgTable(name: \\"incoming_emails\\") {
  id: Int! @unique
  cc_addresses: String
  created_at: DateTime!
  error: String
  from_address: String
  is_auto_generated: Boolean @default(value: false)
  is_bounce: Boolean! @default(value: false)
  message_id: String
  post_id: Int
  raw: String
  rejection_message: String
  subject: String
  to_addresses: String
  topic_id: Int
  updated_at: DateTime!
  user_id: Int
}

type IncomingLink @pgTable(name: \\"incoming_links\\") {
  id: Int! @unique
  created_at: DateTime!
  current_user_id: Int
  incoming_referer_id: Int
  # Type inet is not supported
  # ip_address: inet
  post_id: Int!
  user_id: Int
}

type IncomingReferer @pgTable(name: \\"incoming_referers\\") {
  id: Int! @unique
  incoming_domain_id: Int!
  path: String!
}

type InstagramUserInfo @pgTable(name: \\"instagram_user_infos\\") {
  id: Int! @unique
  created_at: DateTime!
  instagram_user_id: Int
  screen_name: String
  updated_at: DateTime!
  user_id: Int
}

type Invite @pgTable(name: \\"invites\\") {
  id: Int! @unique
  created_at: DateTime!
  custom_message: String
  deleted_at: DateTime
  deleted_by_id: Int
  email: String
  invalidated_at: DateTime
  invite_key: String! @unique
  invited_by_id: Int!
  moderator: Boolean! @default(value: false)
  redeemed_at: DateTime
  updated_at: DateTime!
  user_id: Int
}

type InvitedGroup @pgTable(name: \\"invited_groups\\") {
  id: Int! @unique
  created_at: DateTime!
  group_id: Int
  invite_id: Int
  updated_at: DateTime!
}

type JavascriptCach @pgTable(name: \\"javascript_caches\\") {
  id: Int! @unique
  content: String!
  created_at: DateTime!
  digest: String
  theme_field_id: Int!
  updated_at: DateTime!
}

type MessageBus @pgTable(name: \\"message_bus\\") {
  id: Int! @unique
  context: String
  created_at: DateTime!
  data: String
  name: String
}

type MutedUser @pgTable(name: \\"muted_users\\") {
  id: Int! @unique
  created_at: DateTime
  muted_user_id: Int!
  updated_at: DateTime
  user_id: Int!
}

type Notification @pgTable(name: \\"notifications\\") {
  id: Int! @unique
  created_at: DateTime!
  data: String!
  notification_type: Int!
  post_action_id: Int
  post_number: Int
  read: Boolean! @default(value: false)
  topic_id: Int
  updated_at: DateTime!
  user_id: Int!
}

type Oauth2UserInfo @pgTable(name: \\"oauth2_user_infos\\") {
  id: Int! @unique
  created_at: DateTime!
  email: String
  name: String
  provider: String!
  uid: String!
  updated_at: DateTime!
  user_id: Int!
}

type OnceoffLog @pgTable(name: \\"onceoff_logs\\") {
  id: Int! @unique
  created_at: DateTime!
  job_name: String
  updated_at: DateTime!
}

type OptimizedImage @pgTable(name: \\"optimized_images\\") {
  id: Int! @unique
  extension: String!
  filesize: Int
  height: Int!
  sha1: String!
  upload_id: Int!
  url: String!
  width: Int!
}

type Permalink @pgTable(name: \\"permalinks\\") {
  id: Int! @unique
  category_id: Int
  created_at: DateTime
  external_url: String
  post_id: Int
  topic_id: Int
  updated_at: DateTime
  url: String! @unique
}

type PluginStoreRow @pgTable(name: \\"plugin_store_rows\\") {
  id: Int! @unique
  key: String!
  plugin_name: String!
  type_name: String!
  value: String
}

type Post @pgTable(name: \\"posts\\") {
  id: Int! @unique
  action_code: String
  avg_time: Int
  baked_at: DateTime
  baked_version: Int
  bookmark_count: Int! @default(value: 0)
  cook_method: Int! @default(value: 1)
  # The processed HTML that is presented in a topic.
  cooked: String!
  created_at: DateTime!
  deleted_at: DateTime
  deleted_by_id: Int
  edit_reason: String
  hidden: Boolean! @default(value: false)
  hidden_at: DateTime
  hidden_reason_id: Int
  illegal_count: Int! @default(value: 0)
  image_url: String
  inappropriate_count: Int! @default(value: 0)
  incoming_link_count: Int! @default(value: 0)
  last_editor_id: Int
  last_version_at: DateTime!
  like_count: Int! @default(value: 0)
  like_score: Int! @default(value: 0)
  locked_by_id: Int
  notify_moderators_count: Int! @default(value: 0)
  notify_user_count: Int! @default(value: 0)
  off_topic_count: Int! @default(value: 0)
  percent_rank: Float @default(value: 1.0)
  # The position of this post in the topic. The pair (topic_id, post_number) forms a natural key on the posts table.
  post_number: Int!
  post_type: Int! @default(value: 1)
  public_version: Int! @default(value: 1)
  quote_count: Int! @default(value: 0)
  # The raw Markdown that the user entered into the composer.
  raw: String!
  raw_email: String
  reads: Int! @default(value: 0)
  reply_count: Int! @default(value: 0)
  # This column is true if the post contains a quote-reply, which causes the in-reply-to indicator to be absent.
  reply_quoted: Boolean! @default(value: false)
  # If this post is a reply to another, this column is the post_number of the post it's replying to. [FKEY posts.topic_id, posts.post_number]
  reply_to_post_number: Int
  reply_to_user_id: Int
  score: Float
  self_edits: Int! @default(value: 0)
  sort_order: Int
  spam_count: Int! @default(value: 0)
  topic_id: Int!
  updated_at: DateTime!
  user_deleted: Boolean! @default(value: false)
  user_id: Int
  version: Int! @default(value: 1)
  via_email: Boolean! @default(value: false)
  wiki: Boolean! @default(value: false)
  word_count: Int
}

type PostAction @pgTable(name: \\"post_actions\\") {
  id: Int! @unique
  agreed_at: DateTime
  agreed_by_id: Int
  created_at: DateTime!
  deferred_at: DateTime
  deferred_by_id: Int
  deleted_at: DateTime
  deleted_by_id: Int
  disagreed_at: DateTime
  disagreed_by_id: Int
  post_action_type_id: Int!
  post_id: Int!
  related_post_id: Int
  staff_took_action: Boolean! @default(value: false)
  targets_topic: Boolean! @default(value: false)
  updated_at: DateTime!
  user_id: Int!
}

type PostActionType @pgTable(name: \\"post_action_types\\") {
  id: Int! @unique
  created_at: DateTime!
  icon: String
  is_flag: Boolean! @default(value: false)
  name_key: String!
  position: Int! @default(value: 0)
  updated_at: DateTime!
}

type PostCustomField @pgTable(name: \\"post_custom_fields\\") {
  id: Int! @unique
  created_at: DateTime!
  name: String!
  post_id: Int!
  updated_at: DateTime!
  value: String
}

type PostDetail @pgTable(name: \\"post_details\\") {
  id: Int! @unique
  created_at: DateTime!
  extra: String
  key: String
  post_id: Int
  updated_at: DateTime!
  value: String
}

type PostReply @pgTable(name: \\"post_replies\\") {
  created_at: DateTime!
  post_id: Int
  reply_id: Int
  updated_at: DateTime!
}

type PostReplyKey @pgTable(name: \\"post_reply_keys\\") {
  id: Int! @unique
  created_at: DateTime!
  post_id: Int!
  reply_key: UUID! @unique
  updated_at: DateTime!
  user_id: Int!
}

type PostRevision @pgTable(name: \\"post_revisions\\") {
  id: Int! @unique
  created_at: DateTime!
  hidden: Boolean! @default(value: false)
  modifications: String
  number: Int
  post_id: Int
  updated_at: DateTime!
  user_id: Int
}

type PostSearchDatum @pgTable(name: \\"post_search_data\\") {
  id: Int! @pgColumn(name: \\"post_id\\") @unique
  locale: String
  raw_data: String
  # Type tsvector is not supported
  # search_data: tsvector
  version: Int @default(value: 0)
}

type PostStat @pgTable(name: \\"post_stats\\") {
  id: Int! @unique
  composer_open_duration_msecs: Int
  created_at: DateTime
  drafts_saved: Int
  post_id: Int
  typing_duration_msecs: Int
  updated_at: DateTime
}

type PostTiming @pgTable(name: \\"post_timings\\") {
  msecs: Int!
  post_number: Int!
  topic_id: Int!
  user_id: Int!
}

type PostUpload @pgTable(name: \\"post_uploads\\") {
  id: Int! @unique
  post_id: Int!
  upload_id: Int!
}

type PushSubscription @pgTable(name: \\"push_subscriptions\\") {
  id: Int! @unique
  created_at: DateTime!
  data: String!
  updated_at: DateTime!
  user_id: Int!
}

type QueuedPost @pgTable(name: \\"queued_posts\\") {
  id: Int! @unique
  approved_at: DateTime
  approved_by_id: Int
  created_at: DateTime
  post_options: Json!
  queue: String!
  raw: String!
  rejected_at: DateTime
  rejected_by_id: Int
  state: Int!
  topic_id: Int
  updated_at: DateTime
  user_id: Int!
}

type QuotedPost @pgTable(name: \\"quoted_posts\\") {
  id: Int! @unique
  created_at: DateTime!
  post_id: Int!
  quoted_post_id: Int!
  updated_at: DateTime!
}

type RemoteTheme @pgTable(name: \\"remote_themes\\") {
  id: Int! @unique
  about_url: String
  branch: String
  commits_behind: Int
  created_at: DateTime
  last_error_text: String
  license_url: String
  local_version: String
  private_key: String
  remote_updated_at: DateTime
  remote_url: String!
  remote_version: String
  updated_at: DateTime
}

type SchedulerStat @pgTable(name: \\"scheduler_stats\\") {
  id: Int! @unique
  duration_ms: Int
  error: String
  hostname: String!
  live_slots_finish: Int
  live_slots_start: Int
  name: String!
  pid: Int!
  started_at: DateTime!
  success: Boolean
}

type SchemaMigration @pgTable(name: \\"schema_migrations\\") {
  id: ID! @pgColumn(name: \\"version\\") @unique
}

type SchemaMigrationDetail @pgTable(name: \\"schema_migration_details\\") {
  id: Int! @unique
  created_at: DateTime!
  direction: String
  duration: Int
  git_version: String
  hostname: String
  name: String
  rails_version: String
  version: String!
}

type ScreenedEmail @pgTable(name: \\"screened_emails\\") {
  id: Int! @unique
  action_type: Int!
  created_at: DateTime!
  email: String! @unique
  # Type inet is not supported
  # ip_address: inet
  last_match_at: DateTime
  match_count: Int! @default(value: 0)
  updated_at: DateTime!
}

type ScreenedIpAddress @pgTable(name: \\"screened_ip_addresses\\") {
  id: Int! @unique
  action_type: Int!
  created_at: DateTime!
  # Type inet is not supported
  # ip_address: inet! @unique
  last_match_at: DateTime
  match_count: Int! @default(value: 0)
  updated_at: DateTime!
}

type ScreenedUrl @pgTable(name: \\"screened_urls\\") {
  id: Int! @unique
  action_type: Int!
  created_at: DateTime!
  domain: String!
  # Type inet is not supported
  # ip_address: inet
  last_match_at: DateTime
  match_count: Int! @default(value: 0)
  updated_at: DateTime!
  url: String! @unique
}

type SearchLog @pgTable(name: \\"search_logs\\") {
  id: Int! @unique
  created_at: DateTime!
  # Type inet is not supported
  # ip_address: inet
  search_result_id: Int
  search_result_type: Int
  search_type: Int!
  term: String!
  user_id: Int
}

type SharedDraft @pgTable(name: \\"shared_drafts\\") {
  id: Int! @unique
  category_id: Int!
  created_at: DateTime!
  topic_id: Int! @unique
  updated_at: DateTime!
}

type SingleSignOnRecord @pgTable(name: \\"single_sign_on_records\\") {
  id: Int! @unique
  created_at: DateTime!
  external_avatar_url: String
  external_card_background_url: String
  external_email: String
  external_id: String! @unique
  external_name: String
  external_profile_background_url: String
  external_username: String
  last_payload: String!
  updated_at: DateTime!
  user_id: Int!
}

type SiteSetting @pgTable(name: \\"site_settings\\") {
  id: Int! @unique
  created_at: DateTime!
  data_type: Int!
  name: String!
  updated_at: DateTime!
  value: String
}

type SkippedEmailLog @pgTable(name: \\"skipped_email_logs\\") {
  id: Int! @unique
  created_at: DateTime!
  custom_reason: String
  email_type: String!
  post_id: Int
  reason_type: Int!
  to_address: String!
  updated_at: DateTime!
  user_id: Int
}

type StylesheetCache @pgTable(name: \\"stylesheet_cache\\") {
  id: Int! @unique
  content: String!
  created_at: DateTime
  digest: String!
  source_map: String
  target: String!
  theme_id: Int! @default(value: -1)
  updated_at: DateTime
}

type Tag @pgTable(name: \\"tags\\") {
  id: Int! @unique
  created_at: DateTime
  name: String! @unique
  pm_topic_count: Int! @default(value: 0)
  topic_count: Int! @default(value: 0)
  updated_at: DateTime
}

type TagGroup @pgTable(name: \\"tag_groups\\") {
  id: Int! @unique
  created_at: DateTime
  name: String!
  one_per_topic: Boolean @default(value: false)
  parent_tag_id: Int
  updated_at: DateTime
}

type TagGroupMembership @pgTable(name: \\"tag_group_memberships\\") {
  id: Int! @unique
  created_at: DateTime
  tag_group_id: Int!
  tag_id: Int!
  updated_at: DateTime
}

type TagGroupPermission @pgTable(name: \\"tag_group_permissions\\") {
  id: Int! @unique
  created_at: DateTime!
  group_id: Int!
  permission_type: Int! @default(value: 1)
  tag_group_id: Int!
  updated_at: DateTime!
}

type TagSearchDatum @pgTable(name: \\"tag_search_data\\") {
  id: Int! @pgColumn(name: \\"tag_id\\") @unique
  locale: String
  raw_data: String
  # Type tsvector is not supported
  # search_data: tsvector
  version: Int @default(value: 0)
}

type TagUser @pgTable(name: \\"tag_users\\") {
  id: Int! @unique
  created_at: DateTime
  notification_level: Int!
  tag_id: Int!
  updated_at: DateTime
  user_id: Int!
}

type Theme @pgTable(name: \\"themes\\") {
  id: Int! @unique
  color_scheme_id: Int
  compiler_version: Int! @default(value: 0)
  component: Boolean! @default(value: false)
  created_at: DateTime!
  hidden: Boolean! @default(value: false)
  name: String!
  remote_theme_id: Int @unique
  updated_at: DateTime!
  user_id: Int!
  user_selectable: Boolean! @default(value: false)
}

type ThemeField @pgTable(name: \\"theme_fields\\") {
  id: Int! @unique
  compiler_version: Int! @default(value: 0)
  created_at: DateTime
  error: String
  name: String!
  target_id: Int!
  theme_id: Int!
  type_id: Int! @default(value: 0)
  updated_at: DateTime
  upload_id: Int
  value: String!
  value_baked: String
}

type ThemeSetting @pgTable(name: \\"theme_settings\\") {
  id: Int! @unique
  created_at: DateTime!
  data_type: Int!
  name: String!
  theme_id: Int!
  updated_at: DateTime!
  value: String
}

type TopTopic @pgTable(name: \\"top_topics\\") {
  id: Int! @unique
  all_score: Float @default(value: 0.0)
  daily_likes_count: Int! @default(value: 0)
  daily_op_likes_count: Int! @default(value: 0)
  daily_posts_count: Int! @default(value: 0)
  daily_score: Float @default(value: 0.0)
  daily_views_count: Int! @default(value: 0)
  monthly_likes_count: Int! @default(value: 0)
  monthly_op_likes_count: Int! @default(value: 0)
  monthly_posts_count: Int! @default(value: 0)
  monthly_score: Float @default(value: 0.0)
  monthly_views_count: Int! @default(value: 0)
  quarterly_likes_count: Int! @default(value: 0)
  quarterly_op_likes_count: Int! @default(value: 0)
  quarterly_posts_count: Int! @default(value: 0)
  quarterly_score: Float @default(value: 0.0)
  quarterly_views_count: Int! @default(value: 0)
  topic_id: Int @unique
  weekly_likes_count: Int! @default(value: 0)
  weekly_op_likes_count: Int! @default(value: 0)
  weekly_posts_count: Int! @default(value: 0)
  weekly_score: Float @default(value: 0.0)
  weekly_views_count: Int! @default(value: 0)
  yearly_likes_count: Int! @default(value: 0)
  yearly_op_likes_count: Int! @default(value: 0)
  yearly_posts_count: Int! @default(value: 0)
  yearly_score: Float @default(value: 0.0)
  yearly_views_count: Int! @default(value: 0)
}

type Topic @pgTable(name: \\"topics\\") {
  id: Int! @unique
  archetype: String! @default(value: \\"regular\\")
  archived: Boolean! @default(value: false)
  avg_time: Int
  bumped_at: DateTime!
  category_id: Int
  closed: Boolean! @default(value: false)
  created_at: DateTime!
  deleted_at: DateTime
  deleted_by_id: Int
  excerpt: String
  fancy_title: String
  featured_link: String
  featured_user1_id: Int
  featured_user2_id: Int
  featured_user3_id: Int
  featured_user4_id: Int
  has_summary: Boolean! @default(value: false)
  highest_post_number: Int! @default(value: 0)
  highest_staff_post_number: Int! @default(value: 0)
  image_url: String
  incoming_link_count: Int! @default(value: 0)
  last_post_user_id: Int!
  last_posted_at: DateTime
  like_count: Int! @default(value: 0)
  moderator_posts_count: Int! @default(value: 0)
  notify_moderators_count: Int! @default(value: 0)
  participant_count: Int @default(value: 1)
  percent_rank: Float! @default(value: 1.0)
  pinned_at: DateTime
  pinned_globally: Boolean! @default(value: false)
  pinned_until: DateTime
  posts_count: Int! @default(value: 0)
  reply_count: Int! @default(value: 0)
  score: Float
  slug: String
  spam_count: Int! @default(value: 0)
  subtype: String
  title: String!
  updated_at: DateTime!
  user_id: Int
  views: Int! @default(value: 0)
  visible: Boolean! @default(value: true)
  word_count: Int
}

type TopicAllowedGroup @pgTable(name: \\"topic_allowed_groups\\") {
  id: Int! @unique
  group_id: Int!
  topic_id: Int!
}

type TopicAllowedUser @pgTable(name: \\"topic_allowed_users\\") {
  id: Int! @unique
  created_at: DateTime!
  topic_id: Int!
  updated_at: DateTime!
  user_id: Int!
}

type TopicCustomField @pgTable(name: \\"topic_custom_fields\\") {
  id: Int! @unique
  created_at: DateTime!
  name: String!
  topic_id: Int!
  updated_at: DateTime!
  value: String
}

type TopicEmbed @pgTable(name: \\"topic_embeds\\") {
  id: Int! @unique
  content_sha1: String
  created_at: DateTime!
  deleted_at: DateTime
  deleted_by_id: Int
  embed_url: String! @unique
  post_id: Int!
  topic_id: Int!
  updated_at: DateTime!
}

type TopicInvite @pgTable(name: \\"topic_invites\\") {
  id: Int! @unique
  created_at: DateTime!
  invite_id: Int!
  topic_id: Int!
  updated_at: DateTime!
}

type TopicLink @pgTable(name: \\"topic_links\\") {
  id: Int! @unique
  clicks: Int! @default(value: 0)
  crawled_at: DateTime
  created_at: DateTime!
  domain: String!
  extension: String
  internal: Boolean! @default(value: false)
  link_post_id: Int
  link_topic_id: Int
  post_id: Int
  quote: Boolean! @default(value: false)
  reflection: Boolean @default(value: false)
  title: String
  topic_id: Int!
  updated_at: DateTime!
  url: String!
  user_id: Int!
}

type TopicLinkClick @pgTable(name: \\"topic_link_clicks\\") {
  id: Int! @unique
  created_at: DateTime!
  # Type inet is not supported
  # ip_address: inet
  topic_link_id: Int!
  updated_at: DateTime!
  user_id: Int
}

type TopicSearchDatum @pgTable(name: \\"topic_search_data\\") {
  id: Int! @pgColumn(name: \\"topic_id\\") @unique
  locale: String!
  raw_data: String
  # Type tsvector is not supported
  # search_data: tsvector
  version: Int @default(value: 0)
}

type TopicTag @pgTable(name: \\"topic_tags\\") {
  id: Int! @unique
  created_at: DateTime
  tag_id: Int!
  topic_id: Int!
  updated_at: DateTime
}

type TopicTimer @pgTable(name: \\"topic_timers\\") {
  id: Int! @unique
  based_on_last_post: Boolean! @default(value: false)
  category_id: Int
  created_at: DateTime
  deleted_at: DateTime
  deleted_by_id: Int
  execute_at: DateTime!
  public_type: Boolean @default(value: true)
  status_type: Int!
  topic_id: Int! @unique
  updated_at: DateTime
  user_id: Int!
}

type TopicUser @pgTable(name: \\"topic_users\\") {
  id: Int! @unique
  bookmarked: Boolean @default(value: false)
  cleared_pinned_at: DateTime
  first_visited_at: DateTime
  highest_seen_post_number: Int
  last_emailed_post_number: Int
  last_read_post_number: Int
  last_visited_at: DateTime
  liked: Boolean @default(value: false)
  notification_level: Int! @default(value: 1)
  notifications_changed_at: DateTime
  notifications_reason_id: Int
  posted: Boolean! @default(value: false)
  topic_id: Int!
  total_msecs_viewed: Int! @default(value: 0)
  user_id: Int!
}

type TopicView @pgTable(name: \\"topic_views\\") {
  # Type inet is not supported
  # ip_address: inet
  topic_id: Int!
  user_id: Int
  viewed_at: DateTime!
}

type TranslationOverride @pgTable(name: \\"translation_overrides\\") {
  id: Int! @unique
  compiled_js: String
  created_at: DateTime!
  locale: String!
  translation_key: String!
  updated_at: DateTime!
  value: String!
}

type TwitterUserInfo @pgTable(name: \\"twitter_user_infos\\") {
  id: Int! @unique
  created_at: DateTime!
  email: String
  screen_name: String!
  twitter_user_id: Int! @unique
  updated_at: DateTime!
  user_id: Int! @unique
}

type UnsubscribeKey @pgTable(name: \\"unsubscribe_keys\\") {
  id: ID! @pgColumn(name: \\"key\\") @unique
  created_at: DateTime
  post_id: Int
  topic_id: Int
  unsubscribe_key_type: String
  updated_at: DateTime
  user_id: Int!
}

type Upload @pgTable(name: \\"uploads\\") {
  id: Int! @unique
  created_at: DateTime!
  extension: String
  filesize: Int!
  height: Int
  origin: String
  original_filename: String!
  retain_hours: Int
  sha1: String @unique
  thumbnail_height: Int
  thumbnail_width: Int
  updated_at: DateTime!
  url: String!
  user_id: Int!
  width: Int
}

type User @pgTable(name: \\"users\\") {
  id: Int! @unique
  active: Boolean! @default(value: false)
  admin: Boolean! @default(value: false)
  approved: Boolean! @default(value: false)
  approved_at: DateTime
  approved_by_id: Int
  created_at: DateTime!
  date_of_birth: DateTime
  first_seen_at: DateTime
  flag_level: Int! @default(value: 0)
  group_locked_trust_level: Int
  # Type inet is not supported
  # ip_address: inet
  last_emailed_at: DateTime
  last_posted_at: DateTime
  last_seen_at: DateTime
  locale: String
  manual_locked_trust_level: Int
  moderator: Boolean @default(value: false)
  name: String
  password_hash: String
  previous_visit_at: DateTime
  primary_group_id: Int
  # Type inet is not supported
  # registration_ip_address: inet
  salt: String
  seen_notification_id: Int! @default(value: 0)
  silenced_till: DateTime
  staged: Boolean! @default(value: false)
  suspended_at: DateTime
  suspended_till: DateTime
  title: String
  trust_level: Int!
  updated_at: DateTime!
  uploaded_avatar_id: Int
  username: String! @unique
  username_lower: String! @unique
  views: Int! @default(value: 0)
}

type UserAction @pgTable(name: \\"user_actions\\") {
  id: Int! @unique
  acting_user_id: Int
  action_type: Int!
  created_at: DateTime!
  queued_post_id: Int
  target_post_id: Int
  target_topic_id: Int
  target_user_id: Int
  updated_at: DateTime!
  user_id: Int!
}

type UserApiKey @pgTable(name: \\"user_api_keys\\") {
  id: Int! @unique
  application_name: String!
  client_id: String! @unique
  created_at: DateTime
  key: String! @unique
  last_used_at: DateTime!
  push_url: String
  revoked_at: DateTime
  scopes: String! @default(value: \\"{}\\")
  updated_at: DateTime
  user_id: Int!
}

type UserArchivedMessage @pgTable(name: \\"user_archived_messages\\") {
  id: Int! @unique
  created_at: DateTime
  topic_id: Int!
  updated_at: DateTime
  user_id: Int!
}

type UserAuthToken @pgTable(name: \\"user_auth_tokens\\") {
  id: Int! @unique
  auth_token: String! @unique
  auth_token_seen: Boolean! @default(value: false)
  # Type inet is not supported
  # client_ip: inet
  created_at: DateTime
  prev_auth_token: String! @unique
  rotated_at: DateTime!
  seen_at: DateTime
  updated_at: DateTime
  user_agent: String
  user_id: Int!
}

type UserAuthTokenLog @pgTable(name: \\"user_auth_token_logs\\") {
  id: Int! @unique
  action: String!
  auth_token: String
  # Type inet is not supported
  # client_ip: inet
  created_at: DateTime
  path: String
  user_agent: String
  user_auth_token_id: Int
  user_id: Int
}

type UserAvatar @pgTable(name: \\"user_avatars\\") {
  id: Int! @unique
  created_at: DateTime!
  custom_upload_id: Int
  gravatar_upload_id: Int
  last_gravatar_download_attempt: DateTime
  updated_at: DateTime!
  user_id: Int!
}

type UserBadge @pgTable(name: \\"user_badges\\") {
  id: Int! @unique
  badge_id: Int!
  granted_at: DateTime!
  granted_by_id: Int!
  notification_id: Int
  post_id: Int
  seq: Int! @default(value: 0)
  user_id: Int!
}

type UserCustomField @pgTable(name: \\"user_custom_fields\\") {
  id: Int! @unique
  created_at: DateTime!
  name: String!
  updated_at: DateTime!
  user_id: Int!
  value: String
}

type UserEmail @pgTable(name: \\"user_emails\\") {
  id: Int! @unique
  created_at: DateTime
  email: String!
  primary: Boolean! @default(value: false)
  updated_at: DateTime
  user_id: Int!
}

type UserExport @pgTable(name: \\"user_exports\\") {
  id: Int! @unique
  created_at: DateTime
  file_name: String!
  updated_at: DateTime
  upload_id: Int
  user_id: Int!
}

type UserField @pgTable(name: \\"user_fields\\") {
  id: Int! @unique
  created_at: DateTime
  description: String!
  editable: Boolean! @default(value: false)
  external_name: String
  external_type: String
  field_type: String!
  name: String!
  position: Int @default(value: 0)
  required: Boolean! @default(value: true)
  show_on_profile: Boolean! @default(value: false)
  show_on_user_card: Boolean! @default(value: false)
  updated_at: DateTime
}

type UserFieldOption @pgTable(name: \\"user_field_options\\") {
  id: Int! @unique
  created_at: DateTime
  updated_at: DateTime
  user_field_id: Int!
  value: String!
}

type UserHistory @pgTable(name: \\"user_histories\\") {
  id: Int! @unique
  acting_user_id: Int
  action: Int!
  admin_only: Boolean @default(value: false)
  category_id: Int
  context: String
  created_at: DateTime!
  custom_type: String
  details: String
  email: String
  ip_address: String
  new_value: String
  post_id: Int
  previous_value: String
  subject: String
  target_user_id: Int
  topic_id: Int
  updated_at: DateTime!
}

type UserOpenId @pgTable(name: \\"user_open_ids\\") {
  id: Int! @unique
  active: Boolean!
  created_at: DateTime!
  email: String!
  updated_at: DateTime!
  url: String!
  user_id: Int!
}

type UserOption @pgTable(name: \\"user_options\\") {
  id: Int! @pgColumn(name: \\"user_id\\") @unique
  allow_private_messages: Boolean! @default(value: true)
  auto_track_topics_after_msecs: Int
  automatically_unpin_topics: Boolean! @default(value: true)
  digest_after_minutes: Int
  disable_jump_reply: Boolean! @default(value: false)
  dynamic_favicon: Boolean! @default(value: false)
  email_always: Boolean! @default(value: false)
  email_digests: Boolean
  email_direct: Boolean! @default(value: true)
  email_in_reply_to: Boolean! @default(value: true)
  email_previous_replies: Int! @default(value: 2)
  email_private_messages: Boolean! @default(value: true)
  enable_quoting: Boolean! @default(value: true)
  external_links_in_new_tab: Boolean! @default(value: false)
  hide_profile_and_presence: Boolean! @default(value: false)
  homepage_id: Int
  include_tl0_in_digests: Boolean @default(value: false)
  last_redirected_to_top_at: DateTime
  like_notification_frequency: Int! @default(value: 1)
  mailing_list_mode: Boolean! @default(value: false)
  mailing_list_mode_frequency: Int! @default(value: 1)
  new_topic_duration_minutes: Int
  notification_level_when_replying: Int
  theme_ids: Int!
  theme_key_seq: Int! @default(value: 0)
}

type UserProfile @pgTable(name: \\"user_profiles\\") {
  id: Int! @pgColumn(name: \\"user_id\\") @unique
  badge_granted_title: Boolean @default(value: false)
  bio_cooked: String
  bio_cooked_version: Int
  bio_raw: String
  card_background: String
  dismissed_banner_key: Int
  location: String
  profile_background: String
  views: Int! @default(value: 0)
  website: String
}

type UserProfileView @pgTable(name: \\"user_profile_views\\") {
  id: Int! @unique
  # Type inet is not supported
  # ip_address: inet
  user_id: Int
  user_profile_id: Int!
  viewed_at: DateTime!
}

type UserSearchDatum @pgTable(name: \\"user_search_data\\") {
  id: Int! @pgColumn(name: \\"user_id\\") @unique
  locale: String
  raw_data: String
  # Type tsvector is not supported
  # search_data: tsvector
  version: Int @default(value: 0)
}

type UserSecondFactor @pgTable(name: \\"user_second_factors\\") {
  id: Int! @unique
  created_at: DateTime!
  data: String!
  enabled: Boolean! @default(value: false)
  last_used: DateTime
  method: Int!
  updated_at: DateTime!
  user_id: Int!
}

type UserStat @pgTable(name: \\"user_stats\\") {
  id: Int! @pgColumn(name: \\"user_id\\") @unique
  bounce_score: Float! @default(value: 0)
  days_visited: Int! @default(value: 0)
  first_post_created_at: DateTime
  likes_given: Int! @default(value: 0)
  likes_received: Int! @default(value: 0)
  new_since: DateTime!
  post_count: Int! @default(value: 0)
  posts_read_count: Int! @default(value: 0)
  read_faq: DateTime
  reset_bounce_score_after: DateTime
  time_read: Int! @default(value: 0)
  topic_count: Int! @default(value: 0)
  topic_reply_count: Int! @default(value: 0)
  topics_entered: Int! @default(value: 0)
}

type UserUpload @pgTable(name: \\"user_uploads\\") {
  id: Int! @unique
  created_at: DateTime!
  upload_id: Int!
  user_id: Int!
}

type UserVisit @pgTable(name: \\"user_visits\\") {
  id: Int! @unique
  mobile: Boolean @default(value: false)
  posts_read: Int @default(value: 0)
  time_read: Int! @default(value: 0)
  user_id: Int!
  visited_at: DateTime!
}

type UserWarning @pgTable(name: \\"user_warnings\\") {
  id: Int! @unique
  created_at: DateTime
  created_by_id: Int!
  topic_id: Int! @unique
  updated_at: DateTime
  user_id: Int!
}

type WatchedWord @pgTable(name: \\"watched_words\\") {
  id: Int! @unique
  action: Int!
  created_at: DateTime
  updated_at: DateTime
  word: String!
}

type WebCrawlerRequest @pgTable(name: \\"web_crawler_requests\\") {
  id: Int! @unique
  count: Int! @default(value: 0)
  date: DateTime!
  user_agent: String!
}

type WebHook @pgTable(name: \\"web_hooks\\") {
  id: Int! @unique
  active: Boolean! @default(value: false)
  content_type: Int! @default(value: 1)
  created_at: DateTime
  last_delivery_status: Int! @default(value: 1)
  payload_url: String!
  secret: String @default(value: \\"\\")
  status: Int! @default(value: 1)
  updated_at: DateTime
  verify_certificate: Boolean! @default(value: true)
  wildcard_web_hook: Boolean! @default(value: false)
}

type WebHookEvent @pgTable(name: \\"web_hook_events\\") {
  id: Int! @unique
  created_at: DateTime
  duration: Int @default(value: 0)
  headers: String
  payload: String
  response_body: String
  response_headers: String
  status: Int @default(value: 0)
  updated_at: DateTime
  web_hook_id: Int!
}

type WebHookEventType @pgTable(name: \\"web_hook_event_types\\") {
  id: Int! @unique
  name: String!
}

type WebHookEventTypesHook @pgTable(name: \\"web_hook_event_types_hooks\\") {
  web_hook_event_type_id: Int!
  web_hook_id: Int!
}"
`;

exports[`Introspector discourse 2`] = `
"type ApiKey @db(name: \\"api_keys\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"api_keys_id_seq\\", initialValue: 1, allocationSize: 1)
  # Type _inet is not supported
  # allowed_ips: _inet
  created_at: DateTime!
  created_by_id: Int
  hidden: Boolean! @default(value: false)
  key: String!
  updated_at: DateTime!
  user_id: Int @unique
}

type ApplicationRequest @db(name: \\"application_requests\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"application_requests_id_seq\\", initialValue: 1, allocationSize: 1)
  count: Int! @default(value: 0)
  date: DateTime!
  req_type: Int!
}

type ArInternalMetadatum @db(name: \\"ar_internal_metadata\\") {
  key: ID! @id(strategy: NONE)
  created_at: DateTime!
  updated_at: DateTime!
  value: String
}

type Badge @db(name: \\"badges\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"badges_id_seq\\", initialValue: 100, allocationSize: 1)
  allow_title: Boolean! @default(value: false)
  auto_revoke: Boolean! @default(value: true)
  badge_grouping_id: Int! @default(value: 5)
  badge_type_id: Int!
  created_at: DateTime!
  description: String
  enabled: Boolean! @default(value: true)
  grant_count: Int! @default(value: 0)
  icon: String @default(value: \\"fa-certificate\\")
  image: String
  listable: Boolean @default(value: true)
  long_description: String
  multiple_grant: Boolean! @default(value: false)
  name: String! @unique
  query: String
  show_posts: Boolean! @default(value: false)
  system: Boolean! @default(value: false)
  target_posts: Boolean @default(value: false)
  trigger: Int
  updated_at: DateTime!
}

type BadgeGrouping @db(name: \\"badge_groupings\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"badge_groupings_id_seq\\", initialValue: 1, allocationSize: 1)
  created_at: DateTime!
  description: String
  name: String!
  position: Int!
  updated_at: DateTime!
}

type BadgeType @db(name: \\"badge_types\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"badge_types_id_seq\\", initialValue: 1, allocationSize: 1)
  created_at: DateTime!
  name: String! @unique
  updated_at: DateTime!
}

type CategoriesWebHook @db(name: \\"categories_web_hooks\\") {
  category_id: Int!
  web_hook_id: Int!
}

type Category @db(name: \\"categories\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"categories_id_seq\\", initialValue: 1, allocationSize: 1)
  all_topics_wiki: Boolean! @default(value: false)
  allow_badges: Boolean! @default(value: true)
  auto_close_based_on_last_post: Boolean @default(value: false)
  auto_close_hours: Float
  color: String! @default(value: \\"AB9364\\")
  contains_messages: Boolean
  created_at: DateTime!
  default_top_period: String @default(value: \\"all\\")
  default_view: String
  description: String
  email_in: String @unique
  email_in_allow_strangers: Boolean @default(value: false)
  latest_post_id: Int
  latest_topic_id: Int
  mailinglist_mirror: Boolean! @default(value: false)
  minimum_required_tags: Int @default(value: 0)
  name: String! @unique
  name_lower: String!
  navigate_to_first_post_after_read: Boolean! @default(value: false)
  num_featured_topics: Int @default(value: 3)
  parent_category_id: Int
  position: Int
  post_count: Int! @default(value: 0)
  posts_day: Int @default(value: 0)
  posts_month: Int @default(value: 0)
  posts_week: Int @default(value: 0)
  posts_year: Int @default(value: 0)
  read_restricted: Boolean! @default(value: false)
  show_subcategory_list: Boolean @default(value: false)
  slug: String!
  sort_ascending: Boolean
  sort_order: String
  subcategory_list_style: String @default(value: \\"rows_with_featured_topics\\")
  suppress_from_latest: Boolean @default(value: false)
  text_color: String! @default(value: \\"FFFFFF\\")
  topic_count: Int! @default(value: 0)
  topic_featured_link_allowed: Boolean @default(value: true)
  topic_id: Int
  topic_template: String
  topics_day: Int @default(value: 0)
  topics_month: Int @default(value: 0)
  topics_week: Int @default(value: 0)
  topics_year: Int @default(value: 0)
  updated_at: DateTime!
  uploaded_background_id: Int
  uploaded_logo_id: Int
  user_id: Int!
}

type CategoryCustomField @db(name: \\"category_custom_fields\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"category_custom_fields_id_seq\\", initialValue: 1, allocationSize: 1)
  category_id: Int!
  created_at: DateTime!
  name: String!
  updated_at: DateTime!
  value: String
}

type CategoryFeaturedTopic @db(name: \\"category_featured_topics\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"category_featured_topics_id_seq\\", initialValue: 1, allocationSize: 1)
  category_id: Int!
  created_at: DateTime!
  rank: Int! @default(value: 0)
  topic_id: Int!
  updated_at: DateTime!
}

type CategoryGroup @db(name: \\"category_groups\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"category_groups_id_seq\\", initialValue: 1, allocationSize: 1)
  category_id: Int!
  created_at: DateTime!
  group_id: Int!
  permission_type: Int @default(value: 1)
  updated_at: DateTime!
}

type CategorySearchDatum @db(name: \\"category_search_data\\") {
  category_id: Int! @id(strategy: NONE)
  locale: String
  raw_data: String
  # Type tsvector is not supported
  # search_data: tsvector
  version: Int @default(value: 0)
}

type CategoryTag @db(name: \\"category_tags\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"category_tags_id_seq\\", initialValue: 1, allocationSize: 1)
  category_id: Int!
  created_at: DateTime
  tag_id: Int!
  updated_at: DateTime
}

type CategoryTagGroup @db(name: \\"category_tag_groups\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"category_tag_groups_id_seq\\", initialValue: 1, allocationSize: 1)
  category_id: Int!
  created_at: DateTime
  tag_group_id: Int!
  updated_at: DateTime
}

type CategoryTagStat @db(name: \\"category_tag_stats\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"category_tag_stats_id_seq\\", initialValue: 1, allocationSize: 1)
  category_id: Int!
  tag_id: Int!
  topic_count: Int! @default(value: 0)
}

type CategoryUser @db(name: \\"category_users\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"category_users_id_seq\\", initialValue: 1, allocationSize: 1)
  category_id: Int!
  notification_level: Int!
  user_id: Int!
}

type ChildTheme @db(name: \\"child_themes\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"child_themes_id_seq\\", initialValue: 1, allocationSize: 1)
  child_theme_id: Int
  created_at: DateTime
  parent_theme_id: Int
  updated_at: DateTime
}

type ColorScheme @db(name: \\"color_schemes\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"color_schemes_id_seq\\", initialValue: 1, allocationSize: 1)
  base_scheme_id: String
  created_at: DateTime!
  name: String!
  theme_id: Int
  updated_at: DateTime!
  version: Int! @default(value: 1)
  via_wizard: Boolean! @default(value: false)
}

type ColorSchemeColor @db(name: \\"color_scheme_colors\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"color_scheme_colors_id_seq\\", initialValue: 1, allocationSize: 1)
  color_scheme_id: Int!
  created_at: DateTime!
  hex: String!
  name: String!
  updated_at: DateTime!
}

type CustomEmoji @db(name: \\"custom_emojis\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"custom_emojis_id_seq\\", initialValue: 1, allocationSize: 1)
  created_at: DateTime!
  name: String! @unique
  updated_at: DateTime!
  upload_id: Int!
}

type Developer @db(name: \\"developers\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"developers_id_seq\\", initialValue: 1, allocationSize: 1)
  user_id: Int!
}

type DirectoryItem @db(name: \\"directory_items\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"directory_items_id_seq\\", initialValue: 1, allocationSize: 1)
  created_at: DateTime
  days_visited: Int! @default(value: 0)
  likes_given: Int!
  likes_received: Int!
  period_type: Int!
  post_count: Int!
  posts_read: Int! @default(value: 0)
  topic_count: Int!
  topics_entered: Int!
  updated_at: DateTime
  user_id: Int!
}

type Draft @db(name: \\"drafts\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"drafts_id_seq\\", initialValue: 1, allocationSize: 1)
  created_at: DateTime!
  data: String!
  draft_key: String!
  revisions: Int! @default(value: 1)
  sequence: Int! @default(value: 0)
  updated_at: DateTime!
  user_id: Int!
}

type DraftSequence @db(name: \\"draft_sequences\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"draft_sequences_id_seq\\", initialValue: 1, allocationSize: 1)
  draft_key: String!
  sequence: Int!
  user_id: Int!
}

type EmailChangeRequest @db(name: \\"email_change_requests\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"email_change_requests_id_seq\\", initialValue: 1, allocationSize: 1)
  change_state: Int!
  created_at: DateTime!
  new_email: String!
  new_email_token_id: Int
  old_email: String!
  old_email_token_id: Int
  updated_at: DateTime!
  user_id: Int!
}

type EmailLog @db(name: \\"email_logs\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"email_logs_id_seq\\", initialValue: 1, allocationSize: 1)
  bounce_key: UUID
  bounced: Boolean! @default(value: false)
  created_at: DateTime!
  email_type: String!
  message_id: String
  post_id: Int
  to_address: String!
  updated_at: DateTime!
  user_id: Int
}

type EmailToken @db(name: \\"email_tokens\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"email_tokens_id_seq\\", initialValue: 1, allocationSize: 1)
  confirmed: Boolean! @default(value: false)
  created_at: DateTime!
  email: String!
  expired: Boolean! @default(value: false)
  token: String! @unique
  updated_at: DateTime!
  user_id: Int!
}

type EmbeddableHost @db(name: \\"embeddable_hosts\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"embeddable_hosts_id_seq\\", initialValue: 1, allocationSize: 1)
  category_id: Int!
  class_name: String
  created_at: DateTime
  host: String!
  path_whitelist: String
  updated_at: DateTime
}

type FacebookUserInfo @db(name: \\"facebook_user_infos\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"facebook_user_infos_id_seq\\", initialValue: 1, allocationSize: 1)
  about_me: String
  avatar_url: String
  created_at: DateTime!
  email: String
  facebook_user_id: Int! @unique
  first_name: String
  gender: String
  last_name: String
  link: String
  location: String
  name: String
  updated_at: DateTime!
  user_id: Int! @unique
  username: String
  website: String
}

type GithubUserInfo @db(name: \\"github_user_infos\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"github_user_infos_id_seq\\", initialValue: 1, allocationSize: 1)
  created_at: DateTime!
  github_user_id: Int! @unique
  screen_name: String!
  updated_at: DateTime!
  user_id: Int! @unique
}

type GivenDailyLike @db(name: \\"given_daily_likes\\") {
  given_date: DateTime!
  likes_given: Int!
  limit_reached: Boolean! @default(value: false)
  user_id: Int!
}

type GoogleUserInfo @db(name: \\"google_user_infos\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"google_user_infos_id_seq\\", initialValue: 1, allocationSize: 1)
  created_at: DateTime!
  email: String
  first_name: String
  gender: String
  google_user_id: String! @unique
  last_name: String
  link: String
  name: String
  picture: String
  profile_link: String
  updated_at: DateTime!
  user_id: Int! @unique
}

type Group @db(name: \\"groups\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"groups_id_seq\\", initialValue: 100, allocationSize: 1)
  allow_membership_requests: Boolean! @default(value: false)
  automatic: Boolean! @default(value: false)
  automatic_membership_email_domains: String
  automatic_membership_retroactive: Boolean @default(value: false)
  bio_cooked: String
  bio_raw: String
  created_at: DateTime!
  default_notification_level: Int! @default(value: 3)
  flair_bg_color: String
  flair_color: String
  flair_url: String
  full_name: String
  grant_trust_level: Int
  has_messages: Boolean! @default(value: false)
  incoming_email: String @unique
  membership_request_template: String
  mentionable_level: Int @default(value: 0)
  messageable_level: Int @default(value: 0)
  name: String! @unique
  primary_group: Boolean! @default(value: false)
  public_admission: Boolean! @default(value: false)
  public_exit: Boolean! @default(value: false)
  title: String
  updated_at: DateTime!
  user_count: Int! @default(value: 0)
  visibility_level: Int! @default(value: 0)
}

type GroupArchivedMessage @db(name: \\"group_archived_messages\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"group_archived_messages_id_seq\\", initialValue: 1, allocationSize: 1)
  created_at: DateTime
  group_id: Int!
  topic_id: Int!
  updated_at: DateTime
}

type GroupCustomField @db(name: \\"group_custom_fields\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"group_custom_fields_id_seq\\", initialValue: 1, allocationSize: 1)
  created_at: DateTime!
  group_id: Int!
  name: String!
  updated_at: DateTime!
  value: String
}

type GroupHistory @db(name: \\"group_histories\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"group_histories_id_seq\\", initialValue: 1, allocationSize: 1)
  acting_user_id: Int!
  action: Int!
  created_at: DateTime!
  group_id: Int!
  new_value: String
  prev_value: String
  subject: String
  target_user_id: Int
  updated_at: DateTime!
}

type GroupMention @db(name: \\"group_mentions\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"group_mentions_id_seq\\", initialValue: 1, allocationSize: 1)
  created_at: DateTime
  group_id: Int
  post_id: Int
  updated_at: DateTime
}

type GroupUser @db(name: \\"group_users\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"group_users_id_seq\\", initialValue: 1, allocationSize: 1)
  created_at: DateTime!
  group_id: Int!
  notification_level: Int! @default(value: 2)
  owner: Boolean! @default(value: false)
  updated_at: DateTime!
  user_id: Int!
}

type GroupsWebHook @db(name: \\"groups_web_hooks\\") {
  group_id: Int!
  web_hook_id: Int!
}

type IncomingDomain @db(name: \\"incoming_domains\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"incoming_domains_id_seq\\", initialValue: 1, allocationSize: 1)
  https: Boolean! @default(value: false)
  name: String!
  port: Int!
}

type IncomingEmail @db(name: \\"incoming_emails\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"incoming_emails_id_seq\\", initialValue: 1, allocationSize: 1)
  cc_addresses: String
  created_at: DateTime!
  error: String
  from_address: String
  is_auto_generated: Boolean @default(value: false)
  is_bounce: Boolean! @default(value: false)
  message_id: String
  post_id: Int
  raw: String
  rejection_message: String
  subject: String
  to_addresses: String
  topic_id: Int
  updated_at: DateTime!
  user_id: Int
}

type IncomingLink @db(name: \\"incoming_links\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"incoming_links_id_seq\\", initialValue: 1, allocationSize: 1)
  created_at: DateTime!
  current_user_id: Int
  incoming_referer_id: Int
  # Type inet is not supported
  # ip_address: inet
  post_id: Int!
  user_id: Int
}

type IncomingReferer @db(name: \\"incoming_referers\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"incoming_referers_id_seq\\", initialValue: 1, allocationSize: 1)
  incoming_domain_id: Int!
  path: String!
}

type InstagramUserInfo @db(name: \\"instagram_user_infos\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"instagram_user_infos_id_seq\\", initialValue: 1, allocationSize: 1)
  created_at: DateTime!
  instagram_user_id: Int
  screen_name: String
  updated_at: DateTime!
  user_id: Int
}

type Invite @db(name: \\"invites\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"invites_id_seq\\", initialValue: 1, allocationSize: 1)
  created_at: DateTime!
  custom_message: String
  deleted_at: DateTime
  deleted_by_id: Int
  email: String
  invalidated_at: DateTime
  invite_key: String! @unique
  invited_by_id: Int!
  moderator: Boolean! @default(value: false)
  redeemed_at: DateTime
  updated_at: DateTime!
  user_id: Int
}

type InvitedGroup @db(name: \\"invited_groups\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"invited_groups_id_seq\\", initialValue: 1, allocationSize: 1)
  created_at: DateTime!
  group_id: Int
  invite_id: Int
  updated_at: DateTime!
}

type JavascriptCach @db(name: \\"javascript_caches\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"javascript_caches_id_seq\\", initialValue: 1, allocationSize: 1)
  content: String!
  created_at: DateTime!
  digest: String
  theme_field_id: Int!
  updated_at: DateTime!
}

type MessageBus @db(name: \\"message_bus\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"message_bus_id_seq\\", initialValue: 1, allocationSize: 1)
  context: String
  created_at: DateTime!
  data: String
  name: String
}

type MutedUser @db(name: \\"muted_users\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"muted_users_id_seq\\", initialValue: 1, allocationSize: 1)
  created_at: DateTime
  muted_user_id: Int!
  updated_at: DateTime
  user_id: Int!
}

type Notification @db(name: \\"notifications\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"notifications_id_seq\\", initialValue: 1, allocationSize: 1)
  created_at: DateTime!
  data: String!
  notification_type: Int!
  post_action_id: Int
  post_number: Int
  read: Boolean! @default(value: false)
  topic_id: Int
  updated_at: DateTime!
  user_id: Int!
}

type Oauth2UserInfo @db(name: \\"oauth2_user_infos\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"oauth2_user_infos_id_seq\\", initialValue: 1, allocationSize: 1)
  created_at: DateTime!
  email: String
  name: String
  provider: String!
  uid: String!
  updated_at: DateTime!
  user_id: Int!
}

type OnceoffLog @db(name: \\"onceoff_logs\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"onceoff_logs_id_seq\\", initialValue: 1, allocationSize: 1)
  created_at: DateTime!
  job_name: String
  updated_at: DateTime!
}

type OptimizedImage @db(name: \\"optimized_images\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"optimized_images_id_seq\\", initialValue: 1, allocationSize: 1)
  extension: String!
  filesize: Int
  height: Int!
  sha1: String!
  upload_id: Int!
  url: String!
  width: Int!
}

type Permalink @db(name: \\"permalinks\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"permalinks_id_seq\\", initialValue: 1, allocationSize: 1)
  category_id: Int
  created_at: DateTime
  external_url: String
  post_id: Int
  topic_id: Int
  updated_at: DateTime
  url: String! @unique
}

type PluginStoreRow @db(name: \\"plugin_store_rows\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"plugin_store_rows_id_seq\\", initialValue: 1, allocationSize: 1)
  key: String!
  plugin_name: String!
  type_name: String!
  value: String
}

type Post @db(name: \\"posts\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"posts_id_seq\\", initialValue: 1, allocationSize: 1)
  action_code: String
  avg_time: Int
  baked_at: DateTime
  baked_version: Int
  bookmark_count: Int! @default(value: 0)
  cook_method: Int! @default(value: 1)
  # The processed HTML that is presented in a topic.
  cooked: String!
  created_at: DateTime!
  deleted_at: DateTime
  deleted_by_id: Int
  edit_reason: String
  hidden: Boolean! @default(value: false)
  hidden_at: DateTime
  hidden_reason_id: Int
  illegal_count: Int! @default(value: 0)
  image_url: String
  inappropriate_count: Int! @default(value: 0)
  incoming_link_count: Int! @default(value: 0)
  last_editor_id: Int
  last_version_at: DateTime!
  like_count: Int! @default(value: 0)
  like_score: Int! @default(value: 0)
  locked_by_id: Int
  notify_moderators_count: Int! @default(value: 0)
  notify_user_count: Int! @default(value: 0)
  off_topic_count: Int! @default(value: 0)
  percent_rank: Float @default(value: 1.0)
  # The position of this post in the topic. The pair (topic_id, post_number) forms a natural key on the posts table.
  post_number: Int!
  post_type: Int! @default(value: 1)
  public_version: Int! @default(value: 1)
  quote_count: Int! @default(value: 0)
  # The raw Markdown that the user entered into the composer.
  raw: String!
  raw_email: String
  reads: Int! @default(value: 0)
  reply_count: Int! @default(value: 0)
  # This column is true if the post contains a quote-reply, which causes the in-reply-to indicator to be absent.
  reply_quoted: Boolean! @default(value: false)
  # If this post is a reply to another, this column is the post_number of the post it's replying to. [FKEY posts.topic_id, posts.post_number]
  reply_to_post_number: Int
  reply_to_user_id: Int
  score: Float
  self_edits: Int! @default(value: 0)
  sort_order: Int
  spam_count: Int! @default(value: 0)
  topic_id: Int!
  updated_at: DateTime!
  user_deleted: Boolean! @default(value: false)
  user_id: Int
  version: Int! @default(value: 1)
  via_email: Boolean! @default(value: false)
  wiki: Boolean! @default(value: false)
  word_count: Int
}

type PostAction @db(name: \\"post_actions\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"post_actions_id_seq\\", initialValue: 1, allocationSize: 1)
  agreed_at: DateTime
  agreed_by_id: Int
  created_at: DateTime!
  deferred_at: DateTime
  deferred_by_id: Int
  deleted_at: DateTime
  deleted_by_id: Int
  disagreed_at: DateTime
  disagreed_by_id: Int
  post_action_type_id: Int!
  post_id: Int!
  related_post_id: Int
  staff_took_action: Boolean! @default(value: false)
  targets_topic: Boolean! @default(value: false)
  updated_at: DateTime!
  user_id: Int!
}

type PostActionType @db(name: \\"post_action_types\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"post_action_types_id_seq\\", initialValue: 1, allocationSize: 1)
  created_at: DateTime!
  icon: String
  is_flag: Boolean! @default(value: false)
  name_key: String!
  position: Int! @default(value: 0)
  updated_at: DateTime!
}

type PostCustomField @db(name: \\"post_custom_fields\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"post_custom_fields_id_seq\\", initialValue: 1, allocationSize: 1)
  created_at: DateTime!
  name: String!
  post_id: Int!
  updated_at: DateTime!
  value: String
}

type PostDetail @db(name: \\"post_details\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"post_details_id_seq\\", initialValue: 1, allocationSize: 1)
  created_at: DateTime!
  extra: String
  key: String
  post_id: Int
  updated_at: DateTime!
  value: String
}

type PostReply @db(name: \\"post_replies\\") {
  created_at: DateTime!
  post_id: Int
  reply_id: Int
  updated_at: DateTime!
}

type PostReplyKey @db(name: \\"post_reply_keys\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"post_reply_keys_id_seq\\", initialValue: 1, allocationSize: 1)
  created_at: DateTime!
  post_id: Int!
  reply_key: UUID! @unique
  updated_at: DateTime!
  user_id: Int!
}

type PostRevision @db(name: \\"post_revisions\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"post_revisions_id_seq\\", initialValue: 1, allocationSize: 1)
  created_at: DateTime!
  hidden: Boolean! @default(value: false)
  modifications: String
  number: Int
  post_id: Int
  updated_at: DateTime!
  user_id: Int
}

type PostSearchDatum @db(name: \\"post_search_data\\") {
  post_id: Int! @id(strategy: NONE)
  locale: String
  raw_data: String
  # Type tsvector is not supported
  # search_data: tsvector
  version: Int @default(value: 0)
}

type PostStat @db(name: \\"post_stats\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"post_stats_id_seq\\", initialValue: 1, allocationSize: 1)
  composer_open_duration_msecs: Int
  created_at: DateTime
  drafts_saved: Int
  post_id: Int
  typing_duration_msecs: Int
  updated_at: DateTime
}

type PostTiming @db(name: \\"post_timings\\") {
  msecs: Int!
  post_number: Int!
  topic_id: Int!
  user_id: Int!
}

type PostUpload @db(name: \\"post_uploads\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"post_uploads_id_seq\\", initialValue: 1, allocationSize: 1)
  post_id: Int!
  upload_id: Int!
}

type PushSubscription @db(name: \\"push_subscriptions\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"push_subscriptions_id_seq\\", initialValue: 1, allocationSize: 1)
  created_at: DateTime!
  data: String!
  updated_at: DateTime!
  user_id: Int!
}

type QueuedPost @db(name: \\"queued_posts\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"queued_posts_id_seq\\", initialValue: 1, allocationSize: 1)
  approved_at: DateTime
  approved_by_id: Int
  created_at: DateTime
  post_options: Json!
  queue: String!
  raw: String!
  rejected_at: DateTime
  rejected_by_id: Int
  state: Int!
  topic_id: Int
  updated_at: DateTime
  user_id: Int!
}

type QuotedPost @db(name: \\"quoted_posts\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"quoted_posts_id_seq\\", initialValue: 1, allocationSize: 1)
  created_at: DateTime!
  post_id: Int!
  quoted_post_id: Int!
  updated_at: DateTime!
}

type RemoteTheme @db(name: \\"remote_themes\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"remote_themes_id_seq\\", initialValue: 1, allocationSize: 1)
  about_url: String
  branch: String
  commits_behind: Int
  created_at: DateTime
  last_error_text: String
  license_url: String
  local_version: String
  private_key: String
  remote_updated_at: DateTime
  remote_url: String!
  remote_version: String
  updated_at: DateTime
}

type SchedulerStat @db(name: \\"scheduler_stats\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"scheduler_stats_id_seq\\", initialValue: 1, allocationSize: 1)
  duration_ms: Int
  error: String
  hostname: String!
  live_slots_finish: Int
  live_slots_start: Int
  name: String!
  pid: Int!
  started_at: DateTime!
  success: Boolean
}

type SchemaMigration @db(name: \\"schema_migrations\\") {
  version: ID! @id(strategy: NONE)
}

type SchemaMigrationDetail @db(name: \\"schema_migration_details\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"schema_migration_details_id_seq\\", initialValue: 1, allocationSize: 1)
  created_at: DateTime!
  direction: String
  duration: Int
  git_version: String
  hostname: String
  name: String
  rails_version: String
  version: String!
}

type ScreenedEmail @db(name: \\"screened_emails\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"screened_emails_id_seq\\", initialValue: 1, allocationSize: 1)
  action_type: Int!
  created_at: DateTime!
  email: String! @unique
  # Type inet is not supported
  # ip_address: inet
  last_match_at: DateTime
  match_count: Int! @default(value: 0)
  updated_at: DateTime!
}

type ScreenedIpAddress @db(name: \\"screened_ip_addresses\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"screened_ip_addresses_id_seq\\", initialValue: 1, allocationSize: 1)
  action_type: Int!
  created_at: DateTime!
  # Type inet is not supported
  # ip_address: inet! @unique
  last_match_at: DateTime
  match_count: Int! @default(value: 0)
  updated_at: DateTime!
}

type ScreenedUrl @db(name: \\"screened_urls\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"screened_urls_id_seq\\", initialValue: 1, allocationSize: 1)
  action_type: Int!
  created_at: DateTime!
  domain: String!
  # Type inet is not supported
  # ip_address: inet
  last_match_at: DateTime
  match_count: Int! @default(value: 0)
  updated_at: DateTime!
  url: String! @unique
}

type SearchLog @db(name: \\"search_logs\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"search_logs_id_seq\\", initialValue: 1, allocationSize: 1)
  created_at: DateTime!
  # Type inet is not supported
  # ip_address: inet
  search_result_id: Int
  search_result_type: Int
  search_type: Int!
  term: String!
  user_id: Int
}

type SharedDraft @db(name: \\"shared_drafts\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"shared_drafts_id_seq\\", initialValue: 1, allocationSize: 1)
  category_id: Int!
  created_at: DateTime!
  topic_id: Int! @unique
  updated_at: DateTime!
}

type SingleSignOnRecord @db(name: \\"single_sign_on_records\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"single_sign_on_records_id_seq\\", initialValue: 1, allocationSize: 1)
  created_at: DateTime!
  external_avatar_url: String
  external_card_background_url: String
  external_email: String
  external_id: String! @unique
  external_name: String
  external_profile_background_url: String
  external_username: String
  last_payload: String!
  updated_at: DateTime!
  user_id: Int!
}

type SiteSetting @db(name: \\"site_settings\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"site_settings_id_seq\\", initialValue: 1, allocationSize: 1)
  created_at: DateTime!
  data_type: Int!
  name: String!
  updated_at: DateTime!
  value: String
}

type SkippedEmailLog @db(name: \\"skipped_email_logs\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"skipped_email_logs_id_seq\\", initialValue: 1, allocationSize: 1)
  created_at: DateTime!
  custom_reason: String
  email_type: String!
  post_id: Int
  reason_type: Int!
  to_address: String!
  updated_at: DateTime!
  user_id: Int
}

type StylesheetCache @db(name: \\"stylesheet_cache\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"stylesheet_cache_id_seq\\", initialValue: 1, allocationSize: 1)
  content: String!
  created_at: DateTime
  digest: String!
  source_map: String
  target: String!
  theme_id: Int! @default(value: -1)
  updated_at: DateTime
}

type Tag @db(name: \\"tags\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"tags_id_seq\\", initialValue: 1, allocationSize: 1)
  created_at: DateTime
  name: String! @unique
  pm_topic_count: Int! @default(value: 0)
  topic_count: Int! @default(value: 0)
  updated_at: DateTime
}

type TagGroup @db(name: \\"tag_groups\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"tag_groups_id_seq\\", initialValue: 1, allocationSize: 1)
  created_at: DateTime
  name: String!
  one_per_topic: Boolean @default(value: false)
  parent_tag_id: Int
  updated_at: DateTime
}

type TagGroupMembership @db(name: \\"tag_group_memberships\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"tag_group_memberships_id_seq\\", initialValue: 1, allocationSize: 1)
  created_at: DateTime
  tag_group_id: Int!
  tag_id: Int!
  updated_at: DateTime
}

type TagGroupPermission @db(name: \\"tag_group_permissions\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"tag_group_permissions_id_seq\\", initialValue: 1, allocationSize: 1)
  created_at: DateTime!
  group_id: Int!
  permission_type: Int! @default(value: 1)
  tag_group_id: Int!
  updated_at: DateTime!
}

type TagSearchDatum @db(name: \\"tag_search_data\\") {
  tag_id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"tag_search_data_tag_id_seq\\", initialValue: 1, allocationSize: 1)
  locale: String
  raw_data: String
  # Type tsvector is not supported
  # search_data: tsvector
  version: Int @default(value: 0)
}

type TagUser @db(name: \\"tag_users\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"tag_users_id_seq\\", initialValue: 1, allocationSize: 1)
  created_at: DateTime
  notification_level: Int!
  tag_id: Int!
  updated_at: DateTime
  user_id: Int!
}

type Theme @db(name: \\"themes\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"themes_id_seq\\", initialValue: 1, allocationSize: 1)
  color_scheme_id: Int
  compiler_version: Int! @default(value: 0)
  component: Boolean! @default(value: false)
  created_at: DateTime!
  hidden: Boolean! @default(value: false)
  name: String!
  remote_theme_id: Int @unique
  updated_at: DateTime!
  user_id: Int!
  user_selectable: Boolean! @default(value: false)
}

type ThemeField @db(name: \\"theme_fields\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"theme_fields_id_seq\\", initialValue: 1, allocationSize: 1)
  compiler_version: Int! @default(value: 0)
  created_at: DateTime
  error: String
  name: String!
  target_id: Int!
  theme_id: Int!
  type_id: Int! @default(value: 0)
  updated_at: DateTime
  upload_id: Int
  value: String!
  value_baked: String
}

type ThemeSetting @db(name: \\"theme_settings\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"theme_settings_id_seq\\", initialValue: 1, allocationSize: 1)
  created_at: DateTime!
  data_type: Int!
  name: String!
  theme_id: Int!
  updated_at: DateTime!
  value: String
}

type TopTopic @db(name: \\"top_topics\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"top_topics_id_seq\\", initialValue: 1, allocationSize: 1)
  all_score: Float @default(value: 0.0)
  daily_likes_count: Int! @default(value: 0)
  daily_op_likes_count: Int! @default(value: 0)
  daily_posts_count: Int! @default(value: 0)
  daily_score: Float @default(value: 0.0)
  daily_views_count: Int! @default(value: 0)
  monthly_likes_count: Int! @default(value: 0)
  monthly_op_likes_count: Int! @default(value: 0)
  monthly_posts_count: Int! @default(value: 0)
  monthly_score: Float @default(value: 0.0)
  monthly_views_count: Int! @default(value: 0)
  quarterly_likes_count: Int! @default(value: 0)
  quarterly_op_likes_count: Int! @default(value: 0)
  quarterly_posts_count: Int! @default(value: 0)
  quarterly_score: Float @default(value: 0.0)
  quarterly_views_count: Int! @default(value: 0)
  topic_id: Int @unique
  weekly_likes_count: Int! @default(value: 0)
  weekly_op_likes_count: Int! @default(value: 0)
  weekly_posts_count: Int! @default(value: 0)
  weekly_score: Float @default(value: 0.0)
  weekly_views_count: Int! @default(value: 0)
  yearly_likes_count: Int! @default(value: 0)
  yearly_op_likes_count: Int! @default(value: 0)
  yearly_posts_count: Int! @default(value: 0)
  yearly_score: Float @default(value: 0.0)
  yearly_views_count: Int! @default(value: 0)
}

type Topic @db(name: \\"topics\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"topics_id_seq\\", initialValue: 1, allocationSize: 1)
  archetype: String! @default(value: \\"regular\\")
  archived: Boolean! @default(value: false)
  avg_time: Int
  bumped_at: DateTime!
  category_id: Int
  closed: Boolean! @default(value: false)
  created_at: DateTime!
  deleted_at: DateTime
  deleted_by_id: Int
  excerpt: String
  fancy_title: String
  featured_link: String
  featured_user1_id: Int
  featured_user2_id: Int
  featured_user3_id: Int
  featured_user4_id: Int
  has_summary: Boolean! @default(value: false)
  highest_post_number: Int! @default(value: 0)
  highest_staff_post_number: Int! @default(value: 0)
  image_url: String
  incoming_link_count: Int! @default(value: 0)
  last_post_user_id: Int!
  last_posted_at: DateTime
  like_count: Int! @default(value: 0)
  moderator_posts_count: Int! @default(value: 0)
  notify_moderators_count: Int! @default(value: 0)
  participant_count: Int @default(value: 1)
  percent_rank: Float! @default(value: 1.0)
  pinned_at: DateTime
  pinned_globally: Boolean! @default(value: false)
  pinned_until: DateTime
  posts_count: Int! @default(value: 0)
  reply_count: Int! @default(value: 0)
  score: Float
  slug: String
  spam_count: Int! @default(value: 0)
  subtype: String
  title: String!
  updated_at: DateTime!
  user_id: Int
  views: Int! @default(value: 0)
  visible: Boolean! @default(value: true)
  word_count: Int
}

type TopicAllowedGroup @db(name: \\"topic_allowed_groups\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"topic_allowed_groups_id_seq\\", initialValue: 1, allocationSize: 1)
  group_id: Int!
  topic_id: Int!
}

type TopicAllowedUser @db(name: \\"topic_allowed_users\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"topic_allowed_users_id_seq\\", initialValue: 1, allocationSize: 1)
  created_at: DateTime!
  topic_id: Int!
  updated_at: DateTime!
  user_id: Int!
}

type TopicCustomField @db(name: \\"topic_custom_fields\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"topic_custom_fields_id_seq\\", initialValue: 1, allocationSize: 1)
  created_at: DateTime!
  name: String!
  topic_id: Int!
  updated_at: DateTime!
  value: String
}

type TopicEmbed @db(name: \\"topic_embeds\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"topic_embeds_id_seq\\", initialValue: 1, allocationSize: 1)
  content_sha1: String
  created_at: DateTime!
  deleted_at: DateTime
  deleted_by_id: Int
  embed_url: String! @unique
  post_id: Int!
  topic_id: Int!
  updated_at: DateTime!
}

type TopicInvite @db(name: \\"topic_invites\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"topic_invites_id_seq\\", initialValue: 1, allocationSize: 1)
  created_at: DateTime!
  invite_id: Int!
  topic_id: Int!
  updated_at: DateTime!
}

type TopicLink @db(name: \\"topic_links\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"topic_links_id_seq\\", initialValue: 1, allocationSize: 1)
  clicks: Int! @default(value: 0)
  crawled_at: DateTime
  created_at: DateTime!
  domain: String!
  extension: String
  internal: Boolean! @default(value: false)
  link_post_id: Int
  link_topic_id: Int
  post_id: Int
  quote: Boolean! @default(value: false)
  reflection: Boolean @default(value: false)
  title: String
  topic_id: Int!
  updated_at: DateTime!
  url: String!
  user_id: Int!
}

type TopicLinkClick @db(name: \\"topic_link_clicks\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"topic_link_clicks_id_seq\\", initialValue: 1, allocationSize: 1)
  created_at: DateTime!
  # Type inet is not supported
  # ip_address: inet
  topic_link_id: Int!
  updated_at: DateTime!
  user_id: Int
}

type TopicSearchDatum @db(name: \\"topic_search_data\\") {
  topic_id: Int! @id(strategy: NONE)
  locale: String!
  raw_data: String
  # Type tsvector is not supported
  # search_data: tsvector
  version: Int @default(value: 0)
}

type TopicTag @db(name: \\"topic_tags\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"topic_tags_id_seq\\", initialValue: 1, allocationSize: 1)
  created_at: DateTime
  tag_id: Int!
  topic_id: Int!
  updated_at: DateTime
}

type TopicTimer @db(name: \\"topic_timers\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"topic_timers_id_seq\\", initialValue: 1, allocationSize: 1)
  based_on_last_post: Boolean! @default(value: false)
  category_id: Int
  created_at: DateTime
  deleted_at: DateTime
  deleted_by_id: Int
  execute_at: DateTime!
  public_type: Boolean @default(value: true)
  status_type: Int!
  topic_id: Int! @unique
  updated_at: DateTime
  user_id: Int!
}

type TopicUser @db(name: \\"topic_users\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"topic_users_id_seq\\", initialValue: 1, allocationSize: 1)
  bookmarked: Boolean @default(value: false)
  cleared_pinned_at: DateTime
  first_visited_at: DateTime
  highest_seen_post_number: Int
  last_emailed_post_number: Int
  last_read_post_number: Int
  last_visited_at: DateTime
  liked: Boolean @default(value: false)
  notification_level: Int! @default(value: 1)
  notifications_changed_at: DateTime
  notifications_reason_id: Int
  posted: Boolean! @default(value: false)
  topic_id: Int!
  total_msecs_viewed: Int! @default(value: 0)
  user_id: Int!
}

type TopicView @db(name: \\"topic_views\\") {
  # Type inet is not supported
  # ip_address: inet
  topic_id: Int!
  user_id: Int
  viewed_at: DateTime!
}

type TranslationOverride @db(name: \\"translation_overrides\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"translation_overrides_id_seq\\", initialValue: 1, allocationSize: 1)
  compiled_js: String
  created_at: DateTime!
  locale: String!
  translation_key: String!
  updated_at: DateTime!
  value: String!
}

type TwitterUserInfo @db(name: \\"twitter_user_infos\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"twitter_user_infos_id_seq\\", initialValue: 1, allocationSize: 1)
  created_at: DateTime!
  email: String
  screen_name: String!
  twitter_user_id: Int! @unique
  updated_at: DateTime!
  user_id: Int! @unique
}

type UnsubscribeKey @db(name: \\"unsubscribe_keys\\") {
  key: ID! @id(strategy: NONE)
  created_at: DateTime
  post_id: Int
  topic_id: Int
  unsubscribe_key_type: String
  updated_at: DateTime
  user_id: Int!
}

type Upload @db(name: \\"uploads\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"uploads_id_seq\\", initialValue: 1, allocationSize: 1)
  created_at: DateTime!
  extension: String
  filesize: Int!
  height: Int
  origin: String
  original_filename: String!
  retain_hours: Int
  sha1: String @unique
  thumbnail_height: Int
  thumbnail_width: Int
  updated_at: DateTime!
  url: String!
  user_id: Int!
  width: Int
}

type User @db(name: \\"users\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"users_id_seq\\", initialValue: 1, allocationSize: 1)
  active: Boolean! @default(value: false)
  admin: Boolean! @default(value: false)
  approved: Boolean! @default(value: false)
  approved_at: DateTime
  approved_by_id: Int
  created_at: DateTime!
  date_of_birth: DateTime
  first_seen_at: DateTime
  flag_level: Int! @default(value: 0)
  group_locked_trust_level: Int
  # Type inet is not supported
  # ip_address: inet
  last_emailed_at: DateTime
  last_posted_at: DateTime
  last_seen_at: DateTime
  locale: String
  manual_locked_trust_level: Int
  moderator: Boolean @default(value: false)
  name: String
  password_hash: String
  previous_visit_at: DateTime
  primary_group_id: Int
  # Type inet is not supported
  # registration_ip_address: inet
  salt: String
  seen_notification_id: Int! @default(value: 0)
  silenced_till: DateTime
  staged: Boolean! @default(value: false)
  suspended_at: DateTime
  suspended_till: DateTime
  title: String
  trust_level: Int!
  updated_at: DateTime!
  uploaded_avatar_id: Int
  username: String! @unique
  username_lower: String! @unique
  views: Int! @default(value: 0)
}

type UserAction @db(name: \\"user_actions\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"user_actions_id_seq\\", initialValue: 1, allocationSize: 1)
  acting_user_id: Int
  action_type: Int!
  created_at: DateTime!
  queued_post_id: Int
  target_post_id: Int
  target_topic_id: Int
  target_user_id: Int
  updated_at: DateTime!
  user_id: Int!
}

type UserApiKey @db(name: \\"user_api_keys\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"user_api_keys_id_seq\\", initialValue: 1, allocationSize: 1)
  application_name: String!
  client_id: String! @unique
  created_at: DateTime
  key: String! @unique
  last_used_at: DateTime!
  push_url: String
  revoked_at: DateTime
  scopes: String! @default(value: \\"{}\\")
  updated_at: DateTime
  user_id: Int!
}

type UserArchivedMessage @db(name: \\"user_archived_messages\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"user_archived_messages_id_seq\\", initialValue: 1, allocationSize: 1)
  created_at: DateTime
  topic_id: Int!
  updated_at: DateTime
  user_id: Int!
}

type UserAuthToken @db(name: \\"user_auth_tokens\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"user_auth_tokens_id_seq\\", initialValue: 1, allocationSize: 1)
  auth_token: String! @unique
  auth_token_seen: Boolean! @default(value: false)
  # Type inet is not supported
  # client_ip: inet
  created_at: DateTime
  prev_auth_token: String! @unique
  rotated_at: DateTime!
  seen_at: DateTime
  updated_at: DateTime
  user_agent: String
  user_id: Int!
}

type UserAuthTokenLog @db(name: \\"user_auth_token_logs\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"user_auth_token_logs_id_seq\\", initialValue: 1, allocationSize: 1)
  action: String!
  auth_token: String
  # Type inet is not supported
  # client_ip: inet
  created_at: DateTime
  path: String
  user_agent: String
  user_auth_token_id: Int
  user_id: Int
}

type UserAvatar @db(name: \\"user_avatars\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"user_avatars_id_seq\\", initialValue: 1, allocationSize: 1)
  created_at: DateTime!
  custom_upload_id: Int
  gravatar_upload_id: Int
  last_gravatar_download_attempt: DateTime
  updated_at: DateTime!
  user_id: Int!
}

type UserBadge @db(name: \\"user_badges\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"user_badges_id_seq\\", initialValue: 1, allocationSize: 1)
  badge_id: Int!
  granted_at: DateTime!
  granted_by_id: Int!
  notification_id: Int
  post_id: Int
  seq: Int! @default(value: 0)
  user_id: Int!
}

type UserCustomField @db(name: \\"user_custom_fields\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"user_custom_fields_id_seq\\", initialValue: 1, allocationSize: 1)
  created_at: DateTime!
  name: String!
  updated_at: DateTime!
  user_id: Int!
  value: String
}

type UserEmail @db(name: \\"user_emails\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"user_emails_id_seq\\", initialValue: 1, allocationSize: 1)
  created_at: DateTime
  email: String!
  primary: Boolean! @default(value: false)
  updated_at: DateTime
  user_id: Int!
}

type UserExport @db(name: \\"user_exports\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"user_exports_id_seq\\", initialValue: 1, allocationSize: 1)
  created_at: DateTime
  file_name: String!
  updated_at: DateTime
  upload_id: Int
  user_id: Int!
}

type UserField @db(name: \\"user_fields\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"user_fields_id_seq\\", initialValue: 1, allocationSize: 1)
  created_at: DateTime
  description: String!
  editable: Boolean! @default(value: false)
  external_name: String
  external_type: String
  field_type: String!
  name: String!
  position: Int @default(value: 0)
  required: Boolean! @default(value: true)
  show_on_profile: Boolean! @default(value: false)
  show_on_user_card: Boolean! @default(value: false)
  updated_at: DateTime
}

type UserFieldOption @db(name: \\"user_field_options\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"user_field_options_id_seq\\", initialValue: 1, allocationSize: 1)
  created_at: DateTime
  updated_at: DateTime
  user_field_id: Int!
  value: String!
}

type UserHistory @db(name: \\"user_histories\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"user_histories_id_seq\\", initialValue: 1, allocationSize: 1)
  acting_user_id: Int
  action: Int!
  admin_only: Boolean @default(value: false)
  category_id: Int
  context: String
  created_at: DateTime!
  custom_type: String
  details: String
  email: String
  ip_address: String
  new_value: String
  post_id: Int
  previous_value: String
  subject: String
  target_user_id: Int
  topic_id: Int
  updated_at: DateTime!
}

type UserOpenId @db(name: \\"user_open_ids\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"user_open_ids_id_seq\\", initialValue: 1, allocationSize: 1)
  active: Boolean!
  created_at: DateTime!
  email: String!
  updated_at: DateTime!
  url: String!
  user_id: Int!
}

type UserOption @db(name: \\"user_options\\") {
  user_id: Int! @id(strategy: NONE)
  allow_private_messages: Boolean! @default(value: true)
  auto_track_topics_after_msecs: Int
  automatically_unpin_topics: Boolean! @default(value: true)
  digest_after_minutes: Int
  disable_jump_reply: Boolean! @default(value: false)
  dynamic_favicon: Boolean! @default(value: false)
  email_always: Boolean! @default(value: false)
  email_digests: Boolean
  email_direct: Boolean! @default(value: true)
  email_in_reply_to: Boolean! @default(value: true)
  email_previous_replies: Int! @default(value: 2)
  email_private_messages: Boolean! @default(value: true)
  enable_quoting: Boolean! @default(value: true)
  external_links_in_new_tab: Boolean! @default(value: false)
  hide_profile_and_presence: Boolean! @default(value: false)
  homepage_id: Int
  include_tl0_in_digests: Boolean @default(value: false)
  last_redirected_to_top_at: DateTime
  like_notification_frequency: Int! @default(value: 1)
  mailing_list_mode: Boolean! @default(value: false)
  mailing_list_mode_frequency: Int! @default(value: 1)
  new_topic_duration_minutes: Int
  notification_level_when_replying: Int
  theme_ids: Int!
  theme_key_seq: Int! @default(value: 0)
}

type UserProfile @db(name: \\"user_profiles\\") {
  user_id: Int! @id(strategy: NONE)
  badge_granted_title: Boolean @default(value: false)
  bio_cooked: String
  bio_cooked_version: Int
  bio_raw: String
  card_background: String
  dismissed_banner_key: Int
  location: String
  profile_background: String
  views: Int! @default(value: 0)
  website: String
}

type UserProfileView @db(name: \\"user_profile_views\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"user_profile_views_id_seq\\", initialValue: 1, allocationSize: 1)
  # Type inet is not supported
  # ip_address: inet
  user_id: Int
  user_profile_id: Int!
  viewed_at: DateTime!
}

type UserSearchDatum @db(name: \\"user_search_data\\") {
  user_id: Int! @id(strategy: NONE)
  locale: String
  raw_data: String
  # Type tsvector is not supported
  # search_data: tsvector
  version: Int @default(value: 0)
}

type UserSecondFactor @db(name: \\"user_second_factors\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"user_second_factors_id_seq\\", initialValue: 1, allocationSize: 1)
  created_at: DateTime!
  data: String!
  enabled: Boolean! @default(value: false)
  last_used: DateTime
  method: Int!
  updated_at: DateTime!
  user_id: Int!
}

type UserStat @db(name: \\"user_stats\\") {
  user_id: Int! @id(strategy: NONE)
  bounce_score: Float! @default(value: 0)
  days_visited: Int! @default(value: 0)
  first_post_created_at: DateTime
  likes_given: Int! @default(value: 0)
  likes_received: Int! @default(value: 0)
  new_since: DateTime!
  post_count: Int! @default(value: 0)
  posts_read_count: Int! @default(value: 0)
  read_faq: DateTime
  reset_bounce_score_after: DateTime
  time_read: Int! @default(value: 0)
  topic_count: Int! @default(value: 0)
  topic_reply_count: Int! @default(value: 0)
  topics_entered: Int! @default(value: 0)
}

type UserUpload @db(name: \\"user_uploads\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"user_uploads_id_seq\\", initialValue: 1, allocationSize: 1)
  created_at: DateTime!
  upload_id: Int!
  user_id: Int!
}

type UserVisit @db(name: \\"user_visits\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"user_visits_id_seq\\", initialValue: 1, allocationSize: 1)
  mobile: Boolean @default(value: false)
  posts_read: Int @default(value: 0)
  time_read: Int! @default(value: 0)
  user_id: Int!
  visited_at: DateTime!
}

type UserWarning @db(name: \\"user_warnings\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"user_warnings_id_seq\\", initialValue: 1, allocationSize: 1)
  created_at: DateTime
  created_by_id: Int!
  topic_id: Int! @unique
  updated_at: DateTime
  user_id: Int!
}

type WatchedWord @db(name: \\"watched_words\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"watched_words_id_seq\\", initialValue: 1, allocationSize: 1)
  action: Int!
  created_at: DateTime
  updated_at: DateTime
  word: String!
}

type WebCrawlerRequest @db(name: \\"web_crawler_requests\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"web_crawler_requests_id_seq\\", initialValue: 1, allocationSize: 1)
  count: Int! @default(value: 0)
  date: DateTime!
  user_agent: String!
}

type WebHook @db(name: \\"web_hooks\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"web_hooks_id_seq\\", initialValue: 1, allocationSize: 1)
  active: Boolean! @default(value: false)
  content_type: Int! @default(value: 1)
  created_at: DateTime
  last_delivery_status: Int! @default(value: 1)
  payload_url: String!
  secret: String @default(value: \\"\\")
  status: Int! @default(value: 1)
  updated_at: DateTime
  verify_certificate: Boolean! @default(value: true)
  wildcard_web_hook: Boolean! @default(value: false)
}

type WebHookEvent @db(name: \\"web_hook_events\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"web_hook_events_id_seq\\", initialValue: 1, allocationSize: 1)
  created_at: DateTime
  duration: Int @default(value: 0)
  headers: String
  payload: String
  response_body: String
  response_headers: String
  status: Int @default(value: 0)
  updated_at: DateTime
  web_hook_id: Int!
}

type WebHookEventType @db(name: \\"web_hook_event_types\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"web_hook_event_types_id_seq\\", initialValue: 1, allocationSize: 1)
  name: String!
}

type WebHookEventTypesHook @db(name: \\"web_hook_event_types_hooks\\") {
  web_hook_event_type_id: Int!
  web_hook_id: Int!
}"
`;
