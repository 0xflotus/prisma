// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Introspector Issue - 4208 1`] = `
"type CloudSecret {
  id: ID! @pgColumn(name: \\"secret\\") @unique
}

type Course @pgTable(name: \\"courses\\") {
  id: Int! @pgColumn(name: \\"course_id\\") @unique
  charLimit: Int! @default(value: 100) @pgColumn(name: \\"char_limit\\")
  code: String!
  courseUsers: [CourseUser]
  endDate: DateTime! @pgColumn(name: \\"end_date\\")
  name: String!
  # Type interval is not supported
  # queueOpenInterval: interval! @pgColumn(name: \\"queue_open_interval\\")
  semester: String!
  sessions: [Session]
  sessionSeries: [SessionSery]
  startDate: DateTime! @pgColumn(name: \\"start_date\\")
  tags: [Tag]
}

type CourseUser @pgTable(name: \\"course_users\\") {
  # Multiple ID fields (compound indexes) are not supported
  # id: Course! @pgColumn(name: \\"course_id\\") @unique
  # Multiple ID fields (compound indexes) are not supported
  # id: User! @pgColumn(name: \\"user_id\\") @unique
  role: String!
}

type InternalMigration {
  id: ID! @unique
  appliedAt: DateTime!
}

type Migration {
  # Multiple ID fields (compound indexes) are not supported
  # id: Int! @default(value: 1) @pgColumn(name: \\"revision\\") @unique
  # Multiple ID fields (compound indexes) are not supported
  # id: Project! @default(value: ) @pgColumn(name: \\"projectId\\") @unique
  applied: Int! @default(value: 0)
  datamodel: String
  errors: String
  finishedAt: DateTime
  functions: String
  rolledBack: Int! @default(value: 0)
  schema: String
  startedAt: DateTime
  status: String! @default(value: \\"PENDING\\")
  steps: String
}

type Project {
  id: ID! @default(value: \\"\\") @unique
  allowMutations: Boolean! @default(value: true)
  allowQueries: Boolean! @default(value: true)
  functions: String
  migration: [Migration]
  secrets: String
}

type Question @pgTable(name: \\"questions\\") {
  id: Int! @pgColumn(name: \\"question_id\\") @unique
  answererId: User @pgColumn(name: \\"answerer_id\\")
  askerId: User! @pgColumn(name: \\"asker_id\\")
  content: String!
  location: String
  questionTags: [QuestionTag]
  sessionId: Session! @pgColumn(name: \\"session_id\\")
  status: String!
  timeAddressed: DateTime @pgColumn(name: \\"time_addressed\\")
  timeEntered: DateTime! @pgColumn(name: \\"time_entered\\")
}

type QuestionTag @linkTable @pgTable(name: \\"question_tags\\") {
  questionId: Question! @pgColumn(name: \\"question_id\\")
  tagId: Tag! @pgColumn(name: \\"tag_id\\")
}

type Session @pgTable(name: \\"sessions\\") {
  id: Int! @pgColumn(name: \\"session_id\\") @unique
  building: String!
  courseId: Course! @pgColumn(name: \\"course_id\\")
  endTime: DateTime! @pgColumn(name: \\"end_time\\")
  questions: [Question]
  room: String!
  sessionSeriesId: SessionSery @pgColumn(name: \\"session_series_id\\")
  sessionTas: [SessionTa]
  startTime: DateTime! @pgColumn(name: \\"start_time\\")
  title: String
}

type SessionSeriesTa @linkTable @pgTable(name: \\"session_series_tas\\") {
  sessionSeriesId: SessionSery! @pgColumn(name: \\"session_series_id\\")
  userId: User! @pgColumn(name: \\"user_id\\")
}

type SessionSery @pgTable(name: \\"session_series\\") {
  id: Int! @pgColumn(name: \\"session_series_id\\") @unique
  building: String!
  courseId: Course! @pgColumn(name: \\"course_id\\")
  endTime: DateTime! @pgColumn(name: \\"end_time\\")
  room: String!
  sessions: [Session]
  sessionSeriesTas: [SessionSeriesTa]
  startTime: DateTime! @pgColumn(name: \\"start_time\\")
  title: String
}

type SessionTa @linkTable @pgTable(name: \\"session_tas\\") {
  sessionId: Session! @pgColumn(name: \\"session_id\\")
  userId: User! @pgColumn(name: \\"user_id\\")
}

type Tag @pgTable(name: \\"tags\\") {
  id: Int! @pgColumn(name: \\"tag_id\\") @unique
  activated: Boolean! @default(value: true)
  courseId: Course! @pgColumn(name: \\"course_id\\")
  level: Int!
  name: String!
  questionTags: [QuestionTag]
  # Could not auto-generate backwards relation field, name would be ambigous.
  # Please specify the name of this field and the name of the relation manually.
  # It references TagRelation.parentId.
  # tagRelations: [TagRelation]
  # Could not auto-generate backwards relation field, name would be ambigous.
  # Please specify the name of this field and the name of the relation manually.
  # It references TagRelation.childId.
  # tagRelations: [TagRelation]
}

type TagRelation @linkTable @pgTable(name: \\"tag_relations\\") {
  childId: Tag! @pgColumn(name: \\"child_id\\")
  parentId: Tag! @pgColumn(name: \\"parent_id\\")
}

type TelemetryInfo {
  id: ID! @unique
  lastPinged: DateTime
}

type User @pgTable(name: \\"users\\") {
  id: Int! @pgColumn(name: \\"user_id\\") @unique
  courseUsers: [CourseUser]
  createdAt: DateTime @pgColumn(name: \\"created_at\\")
  displayName: String @pgColumn(name: \\"display_name\\")
  email: String! @unique
  firstName: String @pgColumn(name: \\"first_name\\")
  googleId: String! @pgColumn(name: \\"google_id\\") @unique
  lastActivityAt: DateTime @pgColumn(name: \\"last_activity_at\\")
  lastName: String @pgColumn(name: \\"last_name\\")
  photoUrl: String @pgColumn(name: \\"photo_url\\")
  # Could not auto-generate backwards relation field, name would be ambigous.
  # Please specify the name of this field and the name of the relation manually.
  # It references Question.askerId.
  # questions: [Question]
  # Could not auto-generate backwards relation field, name would be ambigous.
  # Please specify the name of this field and the name of the relation manually.
  # It references Question.answererId.
  # questions: [Question]
  sessionSeriesTas: [SessionSeriesTa]
  sessionTas: [SessionTa]
}"
`;

exports[`Introspector Issue - 4208 2`] = `
"type CloudSecret {
  secret: ID! @id
}

type Course @db(name: \\"courses\\") {
  course_id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"courses_course_id_seq\\", initialValue: 1, allocationSize: 1)
  charLimit: Int! @db(name: \\"char_limit\\") @default(value: 100)
  code: String!
  courseUsers: [CourseUser]
  endDate: DateTime! @db(name: \\"end_date\\")
  name: String!
  # Type interval is not supported
  # queueOpenInterval: interval! @db(name: \\"queue_open_interval\\")
  semester: String!
  sessions: [Session]
  sessionSeries: [SessionSery]
  startDate: DateTime! @db(name: \\"start_date\\")
  tags: [Tag]
}

type CourseUser @db(name: \\"course_users\\") {
  # Multiple ID fields (compound indexes) are not supported
  # course_id: Course! @id
  # Multiple ID fields (compound indexes) are not supported
  # user_id: User! @id
  role: String!
}

type InternalMigration {
  id: ID! @id
  appliedAt: DateTime!
}

type Migration {
  # Multiple ID fields (compound indexes) are not supported
  # revision: Int! @default(value: 1) @id
  # Multiple ID fields (compound indexes) are not supported
  # projectId: Project! @default(value: ) @id
  applied: Int! @default(value: 0)
  datamodel: String
  errors: String
  finishedAt: DateTime
  functions: String
  rolledBack: Int! @default(value: 0)
  schema: String
  startedAt: DateTime
  status: String! @default(value: \\"PENDING\\")
  steps: String
}

type Project {
  id: ID! @default(value: \\"\\") @id
  allowMutations: Boolean! @default(value: true)
  allowQueries: Boolean! @default(value: true)
  functions: String
  migration: [Migration]
  secrets: String
}

type Question @db(name: \\"questions\\") {
  question_id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"questions_question_id_seq\\", initialValue: 1, allocationSize: 1)
  answererId: User @db(name: \\"answerer_id\\")
  askerId: User! @db(name: \\"asker_id\\")
  content: String!
  location: String
  questionTags: [QuestionTag]
  sessionId: Session! @db(name: \\"session_id\\")
  status: String!
  timeAddressed: DateTime @db(name: \\"time_addressed\\")
  timeEntered: DateTime! @db(name: \\"time_entered\\")
}

type QuestionTag @db(name: \\"question_tags\\") @linkTable {
  questionId: Question! @db(name: \\"question_id\\")
  tagId: Tag! @db(name: \\"tag_id\\")
}

type Session @db(name: \\"sessions\\") {
  session_id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"sessions_session_id_seq\\", initialValue: 1, allocationSize: 1)
  building: String!
  courseId: Course! @db(name: \\"course_id\\")
  endTime: DateTime! @db(name: \\"end_time\\")
  questions: [Question]
  room: String!
  sessionSeriesId: SessionSery @db(name: \\"session_series_id\\")
  sessionTas: [SessionTa]
  startTime: DateTime! @db(name: \\"start_time\\")
  title: String
}

type SessionSeriesTa @db(name: \\"session_series_tas\\") @linkTable {
  sessionSeriesId: SessionSery! @db(name: \\"session_series_id\\")
  userId: User! @db(name: \\"user_id\\")
}

type SessionSery @db(name: \\"session_series\\") {
  session_series_id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"session_series_session_series_id_seq\\", initialValue: 1, allocationSize: 1)
  building: String!
  courseId: Course! @db(name: \\"course_id\\")
  endTime: DateTime! @db(name: \\"end_time\\")
  room: String!
  sessions: [Session]
  sessionSeriesTas: [SessionSeriesTa]
  startTime: DateTime! @db(name: \\"start_time\\")
  title: String
}

type SessionTa @db(name: \\"session_tas\\") @linkTable {
  sessionId: Session! @db(name: \\"session_id\\")
  userId: User! @db(name: \\"user_id\\")
}

type Tag @db(name: \\"tags\\") {
  tag_id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"tags_tag_id_seq\\", initialValue: 1, allocationSize: 1)
  activated: Boolean! @default(value: true)
  courseId: Course! @db(name: \\"course_id\\")
  level: Int!
  name: String!
  questionTags: [QuestionTag]
  # Could not auto-generate backwards relation field, name would be ambigous.
  # Please specify the name of this field and the name of the relation manually.
  # It references TagRelation.parentId.
  # tagRelations: [TagRelation]
  # Could not auto-generate backwards relation field, name would be ambigous.
  # Please specify the name of this field and the name of the relation manually.
  # It references TagRelation.childId.
  # tagRelations: [TagRelation]
}

type TagRelation @db(name: \\"tag_relations\\") @linkTable {
  childId: Tag! @db(name: \\"child_id\\")
  parentId: Tag! @db(name: \\"parent_id\\")
}

type TelemetryInfo {
  id: ID! @id
  lastPinged: DateTime
}

type User @db(name: \\"users\\") {
  user_id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"users_user_id_seq\\", initialValue: 1, allocationSize: 1)
  courseUsers: [CourseUser]
  createdAt: DateTime @db(name: \\"created_at\\")
  displayName: String @db(name: \\"display_name\\")
  email: String! @unique
  firstName: String @db(name: \\"first_name\\")
  googleId: String! @db(name: \\"google_id\\") @unique
  lastActivityAt: DateTime @db(name: \\"last_activity_at\\")
  lastName: String @db(name: \\"last_name\\")
  photoUrl: String @db(name: \\"photo_url\\")
  # Could not auto-generate backwards relation field, name would be ambigous.
  # Please specify the name of this field and the name of the relation manually.
  # It references Question.askerId.
  # questions: [Question]
  # Could not auto-generate backwards relation field, name would be ambigous.
  # Please specify the name of this field and the name of the relation manually.
  # It references Question.answererId.
  # questions: [Question]
  sessionSeriesTas: [SessionSeriesTa]
  sessionTas: [SessionTa]
}"
`;
